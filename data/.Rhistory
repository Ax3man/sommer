com <- (x/x); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- (bnmm*ftu)*com
}else{mm <- bnmm}#fixed
})
}else{ # user provided a matrix
nt <- ncol(Gtc)
if(is.residual){
# mm <- ( matrix(1,nt,nt) * 0 + 1) * 0.04977728 + diag(0.02488864, nt,nt)
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
# print(Gtc)
com <- (Gtc/Gtc); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- (bnmm*5)*com
}else{mm <- bnmm}#fixed
}else{
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
# print(Gtc)
com <- (Gtc/Gtc); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- bnmm*com
}else{mm <- bnmm}#fixed
# mm <- (matrix(1,nt,nt) * 0 + 1) * 0.1 + diag(0.05, nt)
}
Gti <- mm
}
}
}
if(!is.null(specialVariables)){
namess2 <- specialVariables
}
S3 <- list(Z=Zup,K=Kup,Gti=Gti,Gtc=Gtc,typevc=typevc,re_name=re_name,vcs=Guc, terms=namess2)
return(S3)
}
xx <- with(pheno2, gvs(id_focal,id_neighbour))
gvs <- function(..., form=NULL, Gu=NULL, Guc=NULL, Gti=NULL, Gtc=NULL){ # general variance structures
## ... list of structures to define the random effect
## Gu the known covariance matrix of the vs
## Gti the multitrait structure and constraints for it
## Gtc the initial values for the var-cov components
init <- list(...)
namess <- as.character(substitute(list(...)))[-1L]
expi <- function(j){gsub("[\\(\\)]", "", regmatches(j, gregexpr("\\(.*?\\)", j))[[1]])}
expi2 <- function(x){gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", x, perl=T)}
namess2 <- apply(data.frame(namess),1,function(x){
newx <- expi(x); if(length(newx)==0){newx<-""}
newx <- gsub(",.*","",newx)
return(newx)
})
namess2[which(namess2 == "")] <- namess[which(namess2 == "")]
# ref_name <- namess2[length(namess2)]
# certain random effects coming from spl2D(), leg(), and others may need some help to find the terms
specialVariables <- unlist(lapply(init,function(x){(attributes(x)$variables)}))
# print(namess2)
if("units" %in% namess2){
is.residual =TRUE
}else{is.residual=FALSE}
### get the data
init2 <- list() # store the matrices for each random effect provided in ...
for(i in 1:length(init)){# i=1
if(is.list(init[[i]])){ ## if it comes in a list form already from a ds, us, cs function
init2[[i]] <- init[[i]]
}else{ # is a single vector with numbers or characters, ...
if(is.matrix(init[[i]])){ # a matrix is provided already so no need to create it
# relationship matrix
if(!is.null(Gu)){
if(length(Gu[[i]]) > 0){
mm <- Gu[[i]]
}else{
mm=diag(ncol(init[[i]])); rownames(mm) <- colnames(mm) <- colnames(init[[i]])
}
}else{
mm=diag(ncol(init[[i]])); rownames(mm) <- colnames(mm) <- colnames(init[[i]])
}
init2[[i]] <- list(x=init[[i]],mm) # store Z and K
}else{ # is a vector
dummy <- init[[i]]
if(!is.character(dummy) & !is.factor(dummy)){ # user provides a numeric matrix
dummy <- matrix(dummy,ncol=1) # put the vector in a matrix
colnames(dummy) <- namess2[i] # add a name to the matrix
if(!is.null(Gu)){
if(length(Gu[[i]]) > 0){
mm <- Gu[[i]]
}else{
mm=diag(1); rownames(mm) <- colnames(mm) <- namess2[i] # K is a 1 x 1 matrix
}
}else{
mm=diag(1); rownames(mm) <- colnames(mm) <- namess2[i] # K is a 1 x 1 matrix
}
}else{ # user provided a factor or character vector
levs <- na.omit(unique(dummy)) # extract all levels
if(length(levs) > 1){ # if more than one level build a design matrix
dummy  <- model.matrix(~dummy-1,na.action = na.pass) # form Z
}else{ # there was only one level? wrong but
vv <- which(!is.na(dummy));
dummy <- matrix(0,nrow=length(dummy)) # create Z
dummy[vv,] <- 1; colnames(dummy) <- levs # add 1's
}
colnames(dummy) <- gsub("dummy","",colnames(dummy)) # add column names
if(!is.null(Gu)){
if(length(Gu[[i]]) > 0){
mm <- Gu[[i]]
}else{
mm=diag(ncol(dummy)); rownames(mm) <- colnames(mm) <- colnames(dummy) # create K
}
}else{
mm=diag(ncol(dummy)); rownames(mm) <- colnames(mm) <- colnames(dummy) # create K
}
}
init2[[i]] <- list(dummy,mm) # store Z and K
}
}
}
# make a dataframe with the vectors and matrices provided by the user
#########################################################
## build new design and covariance matrices for the structures
## specified in the form argument
#########################################################
init3 <- list() # list to store the new matrices
if(is.null(Guc)){
Guc <- unsm(length(namess2))
colnames(Guc) <- rownames(Guc) <- namess2
}
counter <- 0
typevc <- numeric()
re_name <- character()
for(i in 1:nrow(Guc)){
for(j in i:ncol(Guc)){
if(Guc[i,j] != 0){ # if vcov component has to be estimated
counter <- counter+1
typevc[counter] <- Guc[i,j]
re_name[counter] <- paste(rownames(Guc)[i],colnames(Guc)[j],sep=":")
if(i==j){ # variance component
init3[[counter]] <- list(x=init2[[i]][[1]],init2[[i]][[2]]) # store Z and K
}else{ # covariance componenent
Zx <- cbind(init2[[i]][[1]],init2[[j]][[1]])
Ai <- init2[[i]][[2]]
Aj <- init2[[j]][[2]]
Zeroi <- Ai * 0
Zeroj <- Aj * 0
Ax <- rbind(cbind(Zeroj,Ai),cbind(Aj,Zeroi))
init3[[counter]] <- list(x=Zx,Ax) # store Z and K
}
}
}
}
#########################################################
## put it inside a form in case the user wants something
## lie GxE
#########################################################
if(!is.null(form)){
}
#########################################################
## add Gtc and Gti
#########################################################
if(is.null(Gtc)){
if(!is.null(Gti)){
if(is.list(Gti)){
Gtc <- lapply(Gti, function(x){
nt <- ncol(x)
mm <- matrix(1,nt,nt); mm[lower.tri(mm)] <- 0; mm[upper.tri(mm)] <- 2
return(mm)
})
}else{
nt <- ncol(Gti)
mm <- matrix(1,nt,nt); mm[lower.tri(mm)] <- 0; mm[upper.tri(mm)] <- 2
Gtc <- mm
}
}
}
if(is.null(Gti)){ # user didn't provide Gti
# Gti[lower.tri(Gti)] <- 0
if(!is.null(Gtc)){ # user did provide Gtc so we need to complete them
if(is.list(Gtc)){ ## if user provided a list
if(is.residual){ftu <- 5}else{ftu <- 1}
Gti <- lapply(Gtc,function(x){
nt <- ncol(x)
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
com <- (x/x); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- (bnmm*ftu)*com
}else{mm <- bnmm}#fixed
})
}else{ # user provided a matrix
nt <- ncol(Gtc)
if(is.residual){
# mm <- ( matrix(1,nt,nt) * 0 + 1) * 0.04977728 + diag(0.02488864, nt,nt)
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
# print(Gtc)
com <- (Gtc/Gtc); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- (bnmm*5)*com
}else{mm <- bnmm}#fixed
}else{
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
# print(Gtc)
com <- (Gtc/Gtc); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- bnmm*com
}else{mm <- bnmm}#fixed
# mm <- (matrix(1,nt,nt) * 0 + 1) * 0.1 + diag(0.05, nt)
}
Gti <- mm
}
}
}
if(!is.null(specialVariables)){
namess2 <- specialVariables
}
Zup <- lapply(init3,function(x){x[[1]]})
Kup <- lapply(init3,function(x){x[[2]]})
S3 <- list(Z=Zup,K=Kup,Gti=Gti,Gtc=Gtc,typevc=typevc,re_name=re_name,vcs=Guc, terms=namess2)
return(S3)
}
xx <- with(pheno2, gvs(id_focal,id_neighbour))
xx$vcs
setwd("~/Downloads/Example_IGE_sommer")
library(data.table)
library(sommer)
#### Loading the phenotypic data
pheno <- read.table("pheno_file.csv", header=T, sep=",")
pheno$id_focal <- as.factor(pheno$id_focal)
pheno$id_neighbour <- as.factor(pheno$id_neighbour)
str(pheno)
# The phenotype of interest is single-plant aboveground biomass ("Biomass", in mg) which was measured on 98 Arabidopsis Thaliana accessions grown in pairwise combinations. Each accession was grown either in monoculture, that is with a neighbour plant that shared the same genotype, or in mixture, that is with a neighbour plant of a different genotype. All monocultures and mixtures were replicated in 2 blocks ("id_block"). Biomass was measured on each plant in each pot. "id_focal" is the identity of the genotype on which biomass was measured, and "id_neighbour is the identity genotype that was grown in the same pot.
#### Loading and formatting the genotypic data (SNP cheap data with 206,416 SNPs for 98 A. thaliana accessions)
geno <- fread("geno_file.csv", data.table=F, header=T)
row.names(geno) <- geno$id_accession
geno <- as.matrix(geno[,-c(1:2)])
### Computing a matrix of additive genetic relationships following [Endelman et al. 2011](https://www.g3journal.org/content/2/11/1405)
A <- sommer::A.mat(geno)
nrow(pheno)
set.seed(5434)
pheno2 <- droplevels(pheno[sample(1:nrow(pheno),1000),])
head(pheno2)
### Fitting the mixed model
modIGE <- mmer(Biomass ~ id_block,
random = ~ vs(id_focal) + vs(id_neighbour),
rcov = ~ units,
data = pheno2,
verbose= T)
summary(modIGE)$varcomp
gvs <- function(..., form=NULL, Gu=NULL, Guc=NULL, Gti=NULL, Gtc=NULL){ # general variance structures
## ... list of structures to define the random effect
## Gu the known covariance matrix of the vs
## Gti the multitrait structure and constraints for it
## Gtc the initial values for the var-cov components
init <- list(...)
namess <- as.character(substitute(list(...)))[-1L]
expi <- function(j){gsub("[\\(\\)]", "", regmatches(j, gregexpr("\\(.*?\\)", j))[[1]])}
expi2 <- function(x){gsub("(?<=\\()[^()]*(?=\\))(*SKIP)(*F)|.", "", x, perl=T)}
namess2 <- apply(data.frame(namess),1,function(x){
newx <- expi(x); if(length(newx)==0){newx<-""}
newx <- gsub(",.*","",newx)
return(newx)
})
namess2[which(namess2 == "")] <- namess[which(namess2 == "")]
# ref_name <- namess2[length(namess2)]
# certain random effects coming from spl2D(), leg(), and others may need some help to find the terms
specialVariables <- unlist(lapply(init,function(x){(attributes(x)$variables)}))
# print(namess2)
if("units" %in% namess2){
is.residual =TRUE
}else{is.residual=FALSE}
### get the data
init2 <- list() # store the matrices for each random effect provided in ...
for(i in 1:length(init)){# i=1
if(is.list(init[[i]])){ ## if it comes in a list form already from a ds, us, cs function
init2[[i]] <- init[[i]]
}else{ # is a single vector with numbers or characters, ...
if(is.matrix(init[[i]])){ # a matrix is provided already so no need to create it
# relationship matrix
if(!is.null(Gu)){
if(length(Gu[[i]]) > 0){
mm <- Gu[[i]]
}else{
mm=diag(ncol(init[[i]])); rownames(mm) <- colnames(mm) <- colnames(init[[i]])
}
}else{
mm=diag(ncol(init[[i]])); rownames(mm) <- colnames(mm) <- colnames(init[[i]])
}
init2[[i]] <- list(x=init[[i]],mm) # store Z and K
}else{ # is a vector
dummy <- init[[i]]
if(!is.character(dummy) & !is.factor(dummy)){ # user provides a numeric matrix
dummy <- matrix(dummy,ncol=1) # put the vector in a matrix
colnames(dummy) <- namess2[i] # add a name to the matrix
if(!is.null(Gu)){
if(length(Gu[[i]]) > 0){
mm <- Gu[[i]]
}else{
mm=diag(1); rownames(mm) <- colnames(mm) <- namess2[i] # K is a 1 x 1 matrix
}
}else{
mm=diag(1); rownames(mm) <- colnames(mm) <- namess2[i] # K is a 1 x 1 matrix
}
}else{ # user provided a factor or character vector
levs <- na.omit(unique(dummy)) # extract all levels
if(length(levs) > 1){ # if more than one level build a design matrix
dummy  <- model.matrix(~dummy-1,na.action = na.pass) # form Z
}else{ # there was only one level? wrong but
vv <- which(!is.na(dummy));
dummy <- matrix(0,nrow=length(dummy)) # create Z
dummy[vv,] <- 1; colnames(dummy) <- levs # add 1's
}
colnames(dummy) <- gsub("dummy","",colnames(dummy)) # add column names
if(!is.null(Gu)){
if(length(Gu[[i]]) > 0){
mm <- Gu[[i]]
}else{
mm=diag(ncol(dummy)); rownames(mm) <- colnames(mm) <- colnames(dummy) # create K
}
}else{
mm=diag(ncol(dummy)); rownames(mm) <- colnames(mm) <- colnames(dummy) # create K
}
}
init2[[i]] <- list(dummy,mm) # store Z and K
}
}
}
# make a dataframe with the vectors and matrices provided by the user
#########################################################
## build new design and covariance matrices for the structures
## specified in the form argument
#########################################################
init3 <- list() # list to store the new matrices
if(is.null(Guc)){
Guc <- unsm(length(namess2))
colnames(Guc) <- rownames(Guc) <- namess2
}
counter <- 0
typevc <- numeric()
re_name <- character()
for(i in 1:nrow(Guc)){
for(j in i:ncol(Guc)){
if(Guc[i,j] != 0){ # if vcov component has to be estimated
counter <- counter+1
typevc[counter] <- Guc[i,j]
re_name[counter] <- paste(rownames(Guc)[i],colnames(Guc)[j],sep=":")
if(i==j){ # variance component
init3[[counter]] <- list(x=init2[[i]][[1]],init2[[i]][[2]]) # store Z and K
}else{ # covariance componenent
Zx <- cbind(init2[[i]][[1]],init2[[j]][[1]])
Ai <- init2[[i]][[2]]
Aj <- init2[[j]][[2]]
Zeroi <- Ai * 0
Zeroj <- Aj * 0
Ax <- rbind(cbind(Zeroj,Ai),cbind(Aj,Zeroi))
init3[[counter]] <- list(x=Zx,Ax) # store Z and K
}
}
}
}
#########################################################
## put it inside a form in case the user wants something
## lie GxE
#########################################################
if(!is.null(form)){
}
#########################################################
## add Gtc and Gti
#########################################################
if(is.null(Gtc)){
if(!is.null(Gti)){
if(is.list(Gti)){
Gtc <- lapply(Gti, function(x){
nt <- ncol(x)
mm <- matrix(1,nt,nt); mm[lower.tri(mm)] <- 0; mm[upper.tri(mm)] <- 2
return(mm)
})
}else{
nt <- ncol(Gti)
mm <- matrix(1,nt,nt); mm[lower.tri(mm)] <- 0; mm[upper.tri(mm)] <- 2
Gtc <- mm
}
}
}
if(is.null(Gti)){ # user didn't provide Gti
# Gti[lower.tri(Gti)] <- 0
if(!is.null(Gtc)){ # user did provide Gtc so we need to complete them
if(is.list(Gtc)){ ## if user provided a list
if(is.residual){ftu <- 5}else{ftu <- 1}
Gti <- lapply(Gtc,function(x){
nt <- ncol(x)
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
com <- (x/x); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- (bnmm*ftu)*com
}else{mm <- bnmm}#fixed
})
}else{ # user provided a matrix
nt <- ncol(Gtc)
if(is.residual){
# mm <- ( matrix(1,nt,nt) * 0 + 1) * 0.04977728 + diag(0.02488864, nt,nt)
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
# print(Gtc)
com <- (Gtc/Gtc); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- (bnmm*5)*com
}else{mm <- bnmm}#fixed
}else{
bnmm <- matrix(0.1,nt,nt)+diag(.05,nt)
# print(Gtc)
com <- (Gtc/Gtc); com[which(is.nan(com),arr.ind = TRUE)] <- 0
if((ncol(bnmm) == ncol(com)) & (nrow(bnmm) == nrow(com)) ){ # random
mm <- bnmm*com
}else{mm <- bnmm}#fixed
# mm <- (matrix(1,nt,nt) * 0 + 1) * 0.1 + diag(0.05, nt)
}
Gti <- mm
}
}
}
if(!is.null(specialVariables)){
namess2 <- specialVariables
}
Zup <- lapply(init3,function(x){x[[1]]})
Kup <- lapply(init3,function(x){x[[2]]})
S3 <- list(Z=Zup,K=Kup,Gti=Gti,Gtc=Gtc,typevc=typevc,re_name=re_name,vcs=Guc, terms=namess2)
return(S3)
}
modIGE <- mmer(Biomass ~ id_block,
random = ~ gvs(id_focal, id_neighbour),
rcov = ~ units,
data = pheno2,
verbose= T)
summary(modIGE)$varcomp
modIGE <- mmer(Biomass ~ id_block,
random = ~ gvs(id_focal, id_neighbour, Gu=list(A,A)),
rcov = ~ units,
data = pheno2,
verbose= T)
summary(modIGE)$varcomp
modIGE <- mmer(Biomass ~ id_block,
random = ~ gvs(id_focal, id_neighbour),
rcov = ~ units,
data = pheno2,
verbose= T)
summary(modIGE)$varcomp
setwd("~/Desktop/sommer/R")
DT_ige <- pheno2
head(DT_ige)
colnames(DT_ige)[4]
colnames(DT_ige)[4] <- "trait"
colnames(DT_ige)[3] <- "neighbour"
colnames(DT_ige)[2] <- "focal"
colnames(DT_ige)[1] <- "block"
nrow(DT_ige)
xx <- data.frame(id=paste0("id_",1:10000))
head(xx)
xx <- data.frame(id=paste0("id_",sample(1:10000,10000)))
head(xx)
head(DT_ige)
as.numeric(as.character(DT_ige$focal))
xx[as.numeric(as.character(DT_ige$focal)),"id"]
DT_ige$focal <- xx[as.numeric(as.character(DT_ige$focal)),"id"]
DT_ige$neighbour <- xx[as.numeric(as.character(DT_ige$neighbour)),"id"]
dim(A)
length(table(pheno2$id_block))
length(table(pheno2$id_focal))
A[1:3,1:3]
colnames(A) <- xx[as.numeric(as.character(colnames(A))),"id"]
rownames(A) <- xx[as.numeric(as.character(rownames(A))),"id"]
DT <- DT_ige
### Direct genetic effects model
modDGE <- mmer(trait ~ block,
random = ~ vs(focal) + vs(neighbour),
rcov = ~ units,
data = DT)
summary(modDGE)$varcomp
nrow(DT)
modDGE
### Direct genetic effects model
modDGE <- mmer(trait ~ block,
random = ~ vs(focal) + vs(neighbour),
rcov = ~ units,
data = DT)
summary(modDGE)$varcomp
### Indirect genetic effects model
modIGE <- mmer(trait ~ block,
random = ~ gvs(focal, neighbour),
rcov = ~ units,
data = DT)
A_ige <- A
save(DT_ige, A_ige, file="DT_ige.RData")
getwd()
setwd("~/Desktop/sommer/data")
save(DT_ige, A_ige, file="DT_ige.RData")
summary(modIGE)$varcomp
?vs
?save
setwd("~/Desktop/sommer/data")
save(DT_ige, A_ige, file="DT_ige.RData", version=2)
modIGE <- mmer(Biomass ~ id_block,
random = ~ gvs(id_focal, id_neighbour),
rcov = ~ units,
data = pheno2[1:200,],
verbose= T)
summary(modIGE)$varcomp
modIGE <- mmer(Biomass ~ id_block,
random = ~ gvs(id_focal, id_neighbour),
rcov = ~ units,
data = pheno2[1:700,],
verbose= T)
modIGE <- mmer(Biomass ~ id_block,
random = ~ gvs(id_focal, id_neighbour),
rcov = ~ units,
data = pheno2[1:1000,],
verbose= T)
summary(modIGE)$varcomp
install.packages("~/Desktop/sommer_4.1.3.tar.gz", repos = NULL, type = "source")
load("~/Desktop/sommer/data/DT_ige.RData")
