data(DT_example)
DT <- DT_example
head(DT)
DT$wt <- 1/as.numeric(DT$Year )^2
myW <- diag(sqrt(DT$wt))
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
# W = myW,
# weights = wt,
verbose = FALSE,
data=DT)
ans2 <- mmec(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
W = as(myW, Class="dgCMatrix"),
# emWeight = rep(1,50),
nIters=20,
verbose = TRUE,
data=DT)
unlist(ans1$sigma)
unlist(ans2$sigma)
pmonitor(ans2)
ans2 <- mmec(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
W = as(myW, Class="dgCMatrix"),
emWeight = rep(1,50),
nIters=50,
verbose = TRUE,
data=DT)
unlist(ans1$sigma)
unlist(ans2$sigma)
pmonitor(ans2)
myW <- diag((DT$wt))
ans2 <- mmec(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
W = as(myW, Class="dgCMatrix"),
emWeight = rep(1,50),
nIters=50,
verbose = TRUE,
data=DT)
unlist(ans1$sigma)
unlist(ans2$sigma)
myW <- diag(1/sqrt(DT$wt))
ans2 <- mmec(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
W = as(myW, Class="dgCMatrix"),
emWeight = rep(1,50),
nIters=50,
verbose = TRUE,
data=DT)
unlist(ans1$sigma)
unlist(ans2$sigma)
?DT_sleepstudy
data(DT_sleepstudy)
DT <- DT_sleepstudy
head(DT)
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (1 | Subject), data=DT)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
vc
## sommer
fm2 <- mmer(Reaction ~ Days,
random= ~ Subject,
data=DT, tolParInv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
data=DT, tolParInv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(Days, isc(Subject)),
data=DT, tolParInv = 1e-6, verbose = FALSE)
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
data=DT, tolParInv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
vc
vc
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
vc
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
summary(fm2)$varcomp
head(DT)
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT, weights = 1/Days)
head(sleepstudy)
DT$w <- rnorm(nrow(DT))
data(DT_sleepstudy)
DT <- DT_sleepstudy
head(DT)
DT$w <- rnorm(nrow(DT))
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (1 | Subject), data=DT)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
data=DT, tolParInv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT, weights = w)
DT$w <- DT$w + min(DT$w) + 1
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT, weights = w)
plot(DT$w)
DT$w <- rnorm(nrow(DT))
DT$w + min(DT$w) + 1
min(DT$w)
DT$w + abs(min(DT$w)) + 1
DT$w <- DT$w + abs(min(DT$w)) + 1
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (Days || Subject), data=DT, weights = w)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
data=DT, tolParInv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(DT$w), Class = "dgCMatrix"),
data=DT, tolParInv = 1e-6, verbose = FALSE)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(DT$w), Class = "dgCMatrix"),
data=DT, tolParInv = 1e-6, verbose = T)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(DT$w), Class = "dgCMatrix"),
emWeight = rep(1,20),
data=DT, tolParInv = 1e-6, verbose = T)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/DT$w), Class = "dgCMatrix"),
emWeight = rep(1,20),
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
chol(diag(3)*9)
#######
## when adding new C++ function make sure you run
Rcpp::compileAttributes("/Users/giovannycovarrubias/Desktop/sommer")
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/DT$w), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(DT$w), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
# W=as(diag(DT$w), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
?mmec
solve(chol(diag(3)*9))
(chol(solve(diag(3)*9)))
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(DT$w), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/DT$w), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
pmonitor(fm2)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/DT$w), Class = "dgCMatrix"),
emWeight = rep(.51,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
head(DT)
pmonitor(fm2)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
# W=as(diag(1/DT$w), Class = "dgCMatrix"),
emWeight = rep(.51,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/(DT$w^2)), Class = "dgCMatrix"),
emWeight = rep(.51,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag((DT$w^2)), Class = "dgCMatrix"),
emWeight = rep(.51,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(sqrt(DT$w)), Class = "dgCMatrix"),
emWeight = rep(.51,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(sqrt(DT$w)), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/sqrt(DT$w)), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
# vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject + vsc(isc(Days), isc(Subject)),
W=as(diag(1/(DT$w)), Class = "dgCMatrix"),
emWeight = rep(1,100),
nIters=100,
data=DT, tolParInv = 1e-6, verbose = T)
summary(fm2)$varcomp
data(DT_sleepstudy)
DT <- DT_sleepstudy
head(DT)
DT$w <- abs(rnorm(nrow(DT)))
# DT$w <- DT$w + abs(min(DT$w)) + 1
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (1 | Subject), data=DT)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
vc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
data=DT, tolParLL = 1e-6, verbose = FALSE)
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
data=DT, tolParConvLL = 1e-6, verbose = FALSE)
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(.2,20),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(.5,20),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(.5,20),
W=as(diag(1/(DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
fm2$llik
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(.5,20),
W=as(diag((DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
fm2$llik
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(1,20),
W=as(diag((DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
# DT$w <- DT$w + abs(min(DT$w)) + 1
##################################
## lme4
fm1 <- lmer(Reaction ~ Days + (1 | Subject), data=DT, weights = w)
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(1,20),
W=as(diag(sqrt(DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
fm2$llik
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
?mmec
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(1,20),
W=as(diag((DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
?vsc
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(.1,20),
W=as(diag((DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(1,20),
W=as(diag((DT$w)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
pmonitor(fm2)
## sommer
fm2 <- mmec(Reaction ~ Days,
random= ~ Subject,
emWeight = rep(1,20),
W=as(diag((DT$w/2)), Class = "dgCMatrix"),
data=DT, tolParConvLL = 1e-6)
summary(fm2)$varcomp
vc <- VarCorr(fm1); print(vc,comp=c("Variance"))
library(brms)
?brms
?DT_example
data(DT_example)
DT <- DT_example
A <- A_example
head(DT)
ans2 <- mmer(Yield~Env,
random= ~Name + vsr(dsr(Env),Name),
rcov= ~ vsr(dsr(Env),units),
data=DT)
summary(ans2)
random= ~Name + vsr(dsr(Env),isr(Name))
rcov= ~ vsr(dsr(Env),isr(units))
data=DT
init <- list(us(data$Env),isc(data$Name))
init <- list(usc(data$Env),isc(data$Name))
init
init <- list(usr(data$Env),isr(data$Name))
isr <- function(x){
if(class(x)[1] %in% c("dgCMatrix","matrix") ){
dummy <- x# as(x, Class="dgCMatrix")
mm <- diag(1)#,ncol(x))
}else{ # if user provides a vector
if(!is.character(x) & !is.factor(x)){
namess <- as.character(substitute(list(x)))[-1L]
dummy <- Matrix(x,ncol=1); colnames(dummy) <- namess
mm <- diag(1);
}else{
dummy <- x
levs <- na.omit(unique(dummy))
if(length(levs) > 1){
dummy  <- model.matrix(~dummy-1,na.action = na.pass) # Matrix::sparse.
# if(!is(class(dummy), "dgCMatrix")){
#   dummy <- as(dummy, Class="dgCMatrix")
# }
colnames(dummy) <- gsub("dummy","",colnames(dummy))
}else{
vv <- which(!is.na(dummy));
dummy <- matrix(0,nrow=length(dummy))
dummy[vv,] <- 1; colnames(dummy) <- levs
}
mm <- diag(1)
}
}
colnames(mm) <- rownames(mm) <- "isc"# colnames(dummy)
bnmm <- mm*.15
# if(nrow(bnmm) > 1){
#   bnmm[upper.tri(bnmm)]=bnmm[upper.tri(bnmm)]/2
# }
# if(!is.null(thetaC)){
#   mm <- thetaC
# }
# if(!is.null(theta)){
#   bnmm <- theta
# }
# mm[lower.tri(mm)]=0
return(list(Z=dummy,thetaC=mm))
}
init <- list(usr(data$Env),isr(data$Name))
init
init[[1]]
init[[2]]
init <- list(usr(data$Env),isr(data$Name))
namess <- c("Env","Name")
namess2 <- apply(data.frame(namess),1,function(x){
return(all.vars(as.formula(paste0("~",x))))
})
namess2
## let's test that user provided all terms encapsulated in a structure
listLength <- length(init)
if(listLength == 1){ # very simple structure
myTest <- is.list(init[[1]])
if(myTest){
whichElemBad <- numeric()
}else{whichElemBad <- 1}
}else{ # there's more than one term
lengthElem <- unlist(lapply(init,length))
whichElemBad <- which(lengthElem < 3) ## which are not encapsulated
}
if(length(whichElemBad) > 0){
stop(paste("Term(s): '",paste(namess2[whichElemBad],collapse = ","),"' in the vsc() function are not encapsulated in a structure function. Please correct (e.g., using isc(), dsc(), usc(), atc(), csc(), etc.)."),call. = FALSE)
}
is.list(init[[1]])
length(init)
lengthElem <- unlist(lapply(init,length))
which(lengthElem < 3)
whichElemBad
str(init)
lapply(init,length)
unlist(lapply(init,length))
lengthElem <- unlist(lapply(init,length))
whichElemBad <- which(lengthElem < 2) ## which are not encapsulated
whichElemBad
if(length(whichElemBad) > 0){
stop(paste("Term(s): '",paste(namess2[whichElemBad],collapse = ","),"' in the vsc() function are not encapsulated in a structure function. Please correct (e.g., using isc(), dsc(), usc(), atc(), csc(), etc.)."),call. = FALSE)
}
## extract names of variables and collpase as interaction
namess2 <- as.vector(unique(unlist(namess2))) # remove repeats if exist
namess2[which(namess2 == "")] <- namess[which(namess2 == "")] # remove empties if exist
namess2
# extract the name of the main variable
ref_name <- namess2[length(namess2)]
# certain random effects coming from spl2D(), leg(), and others may need some help to find the terms
specialVariables <- unlist(lapply(init,function(x){(attributes(x)$variables)}))
specialVariables
ref_name
install.packages("Matrix", repos = "http://R-Forge.R-project.org")
?spl2D
library(sommer)
?spl2Da
