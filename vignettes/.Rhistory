# print(dim(AIi))
# print(dim(dLu))
change = ((AIi%*%as.matrix(dLu))*taper[iiter])
change
thetaUnlisted= unlist(lapply(as.list(1:length(theta)), function(x){
return(theta[[x]][which(thetaC[[x]]>0)])
}))
thetaCUnlisted= unlist(lapply(as.list(1:length(thetaC)), function(x){
return(thetaC[[x]][which(thetaC[[x]]>0)])
}))
thetaUnlisted
change
###########################
# 3) calculate wu (working variates) (CORRECT)
# Notes on Estimation of Genetic Parameters
# wu = Zu/s2u
# we = e/s2e
###########################
Xb = X%*%b
Zu <- Wu <- uu <- list()
for(iR in 1:length(Z)){ # for each random effect
partitionsP = partitions[[iR]]
uu2 <- list()
usedPartitionList <- list()
usedPartitionList2 <- list()
for(irow in 1:nrow(partitionsP)){
usedPartition = partitionsP[irow,1]:partitionsP[irow,2]
usedPartitionList[[irow]] <- usedPartition - length(b)
usedPartitionList2[[irow]] <- ((nrow(y)*irow)-nrow(y)+1):(nrow(y)*irow)
uu2[[irow]] = bu[usedPartition] # u
}
uu2s <- do.call(adiag1,lapply(uu2,as.matrix))
uu2sw <- uu2s %*% lambda[[iR]]
# xxx <- do.call(cbind,lapply(uu2,as.matrix)) %*% lambda[[iR]]
# yyy <- split(xxx, rep(1:ncol(xxx), each = nrow(xxx)))
# uu2sw <- do.call(adiag1,lapply(yyy,as.matrix))
Zprovs <- do.call(adiag1, Z[[iR]])
Wus <- Zprovs %*% uu2sw
Zus <- Zprovs %*% uu2s
Wu2 <- Zu2 <- list();counter=1
vcs2 <- numeric()
for(irow in 1:nrow(partitionsP)){
for(icol in irow:nrow(partitionsP)){
vcs2[counter] <- lambda[[iR]][irow,icol]
if(thetaC[[iR]][irow,icol] > 0){
# Wu2[[counter]] <- ( do.call(cbind, Z[[iR]][unique(c(irow,icol))]) %*% unlist(uu2[unique(c(irow,icol))]) ) * lambda[[iR]][irow,icol]
# Zu2[[counter]] <- ( do.call(cbind, Z[[iR]][unique(c(irow,icol))]) %*% unlist(uu2[unique(c(irow,icol))]) )
if(irow == icol){
# Wu2[[counter]] <- Wus[usedPartitionList2[[icol]],icol]
#
# Zu2[[counter]] <- Zus[usedPartitionList2[[icol]],icol]
Wu2[[counter]] <- Z[[iR]][[irow]] %*% uu2sw[usedPartitionList[[icol]],icol]
Zu2[[counter]] <- Z[[iR]][[irow]] %*% uu2s[usedPartitionList[[icol]],icol]
# Wu2[[counter]] <- Z[[iR]][[irow]]%*%(uu2[[irow]]*lambda[[iR]][irow,irow])
#
# Zu2[[counter]] <- Z[[iR]][[irow]]%*%(uu2[[irow]])
}else{
# Wu2[[counter]] <- Wus[usedPartitionList2[[icol]],irow] + Wus[usedPartitionList2[[irow]],icol]
#
# Zu2[[counter]] <- Zus[usedPartitionList2[[icol]],irow] + Zus[usedPartitionList2[[irow]],icol]
Wu2[[counter]] <- (Z[[iR]][[irow]] %*% uu2sw[usedPartitionList[[icol]],icol] +
Z[[iR]][[icol]] %*% uu2sw[usedPartitionList[[irow]],irow])
# Zu2[[counter]] <- (Z[[iR]][[irow]] %*% uu2s[usedPartitionList[[icol]],icol] +
#   Z[[iR]][[icol]] %*% uu2s[usedPartitionList[[irow]],irow])
# Wu2[[counter]] <- 1 * (
#   Z[[iR]][[irow]]%*%(uu2[[irow]]*lambda[[iR]][irow,icol]) + # Za (ua *sam)
#   Z[[iR]][[irow]]%*%(uu2[[icol]]*lambda[[iR]][icol,icol]) + # Za (um *sm)
#   Z[[iR]][[icol]]%*%(uu2[[irow]]*lambda[[iR]][irow,irow]) + # Zm (ua *sa)
#   Z[[iR]][[icol]]%*%(uu2[[icol]]*lambda[[iR]][irow,icol])  # Zm (um *sam)
# )
#
# Zu2[[counter]] <- 1 * (
#   Z[[iR]][[irow]]%*%(uu2[[irow]]) + # Za (ua *sam)
#   Z[[iR]][[irow]]%*%(uu2[[icol]]) + # Za (um *sm)
#   Z[[iR]][[icol]]%*%(uu2[[irow]]) + # Zm (ua *sa)
#   Z[[iR]][[icol]]%*%(uu2[[icol]])  # Zm (um *sam)
# )
}
# if(irow == icol){
#   uu.rc = do.call(cbind,uu2)
#   myorder <- c(irow,setdiff(1:ncol(uu.rc),irow))
#   uu.rc.th = apply(as.matrix(uu.rc[,myorder])%*%lambda[[iR]][irow,myorder],1,sum) # should be a matrix product or regular product?!!
#   Wu2[[counter]] <- Z[[iR]][[irow]]%*%uu.rc.th
#
#   fac=lambda[[iR]][irow,myorder]/lambda[[iR]][irow,myorder]; fac[which(is.nan(fac))]=0
#   uu.rc.th2 = apply(as.matrix(uu.rc[,myorder])%*%fac,1,sum)
#   Zu2[[counter]] <- Z[[iR]][[irow]]%*%uu.rc.th2
#
# }else{
#   uu.ij = cbind(uu2[[irow]],uu2[[icol]])
#   uu.ij1 = apply(as.matrix(uu.ij)%*%c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] ), 1, sum)
#   uu.ij2 = apply(as.matrix(uu.ij)%*%c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] ), 1, sum)
#   Wu2[[counter]] <- Z[[iR]][[irow]]%*%uu.ij1 + Z[[iR]][[icol]]%*%uu.ij2
#
#   fac=c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] )/c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] );fac[which(is.nan(fac))]=0
#   uu.ij1x = apply(as.matrix(uu.ij)%*%fac, 1, sum)
#   fac=c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] )/c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] );fac[which(is.nan(fac))]=0
#   uu.ij2x = apply(as.matrix(uu.ij)%*%fac, 1, sum)
#   Zu2[[counter]] <- Z[[iR]][[irow]]%*%uu.ij1x + Z[[iR]][[icol]]%*%uu.ij2x
# }
counter=counter+1
}
}
}
Wu[[iR]] = do.call(cbind, Wu2)#ZuiR%*%lambda[[iR]] # can be saved as cbind because will have same dimensions always
Zu[[iR]] = do.call(cbind, Zu2)
uu[[iR]] = uu2 # have to be saved by separate because may have different dimensions
}
e = y - (Xb + Reduce("+",lapply(Zu,function(x){matrix(apply(as.matrix(x),1,sum))})))
for(iS in 1:length(S)){
Wu[[iR+iS]] = S[[iS]]%*%(e%*%solve(theta[[ep]]))
}
plot(jkl$Yield2.residuals,e)
AI = matrix(NA, nrow=length(Wu), ncol=length(Wu))
Wx = do.call(cbind,Wu)
C=M[-nrow(M),-ncol(M)] # remove y from M to get the coefficient matrix C
XWj.ZWj = t(m)%*%Ri%*%Wx
WiX.WiZ = t(Wx)%*%Ri%*% m
WiWj= t(Wx)%*%Ri%*%Wx
MWu=rbind( cbind(C,(XWj.ZWj)) , cbind((WiX.WiZ),WiWj) )
MWuChol=try(chol(MWu,pivot=F), silent = TRUE)
if(class(MWuChol)=="try-error"){
MWuChol=try(chol(MWu+diag(tolparinv,nrow(MWu)),pivot=F), silent = FALSE)
}
# nTheta = sum(unlist(lapply(partitions,nrow))) + 1
nTheta = endvc[length(endvc)]
last=nrow(MWuChol); take = (last-nTheta+1):last
AI = (MWuChol[take,take]^2)
AI[lower.tri(AI)] <- t(AI)[lower.tri(AI)] # lower and upper are not equal (upper seems to be the right one to use)
# Ci <- solve(C)
Ci=try(solve(C), silent = TRUE)
if(class(Ci)=="try-error"){
Ci=try(ginv(C), silent = FALSE)
}
dLu = list()
dLe2 = list()
for(iR in 1:length(Wu)){
if(iR > length(Z)){ # sigma.e
dLe1 = (Nr - Nb)/theta[[iR]]
dLu[iR] =  -.5 * ( dLe1  - sum(unlist(lapply(dLe2, matrixcalc::matrix.trace))) - ((t(Wu[[iR]])%*%Wu[[iR]])) ) # We'We
}else{ # sigma.u
SigmaInv = lambda[[iR]]
omega<-omega2<-matrix(0,nrow = nrow(SigmaInv),ncol=ncol(SigmaInv))
for(k in 1:nrow(SigmaInv)){
for(l in 1:nrow(SigmaInv)){
if(thetaC[[iR]][k,l]>0){
usedPartitionK = partitions[[iR]][k,1]:partitions[[iR]][k,2]
usedPartitionL = partitions[[iR]][l,1]:partitions[[iR]][l,2]
trAiCuu = matrixcalc::matrix.trace((Ai[[iR]])%*%Ci[usedPartitionK,usedPartitionL])
omega[k,l] = trAiCuu + uu[[iR]][[k]]%*%Ai[[iR]]%*%uu[[iR]][[l]]
omega2[k,l] = ((Nus[iR])- (trAiCuu/theta[[iR]][k,l])) * (1/theta[[ep]])
}else{
omega[k,l] = 0
omega2[k,l] = 0
}
}
}
# omega[lower.tri(omega)] <- t(omega)[lower.tri(omega)]
# omega2[lower.tri(omega2)] <- t(omega2)[lower.tri(omega2)]
dLuProv = (- 0.5 * ( (Nus[iR]*SigmaInv) - (SigmaInv%*%omega%*%SigmaInv) ))#*thetaC[[iR]]
# dLuProv[upper.tri(dLuProv)] <- 2* dLuProv[upper.tri(dLuProv)] #+ t(dLuProv)[upper.tri(dLuProv)] # fill the upper triangular
# dLuProv= sqrt(t(dLuProv)%*%dLuProv)
# dLuProv[upper.tri(dLuProv)]=dLuProv[upper.tri(dLuProv)]
# print(dLuProv)
dLu[[iR]] = dLuProv[which(thetaC[[iR]]>0)]
# dLu[[iR]] = dLuProv[lower.tri(dLuProv, diag = TRUE)]
dLe2[[iR]] = omega2#( Nus[iR] - (trAiCuu/theta[iR]) ) * (1/theta[ep]) # trAiCuu/theta[iR]
}
}
dLu = unlist(dLu) # do.call(adiag1,dLu)#
dLu
# print(dLu)
###########################
# 7) update the variance paramters (CORRECT)
# PAPER FORMULA (Lee and Van der Werf, 2006)
# theta.n+1 = theta.n + (AIi * dL/ds2)
###########################
AIi <- solve(AI)
# print(dim(AIi))
# print(dim(dLu))
change = ((AIi%*%as.matrix(dLu))*taper[iiter])
change
thetaUnlisted= unlist(lapply(as.list(1:length(theta)), function(x){
return(theta[[x]][which(thetaC[[x]]>0)])
}))
thetaCUnlisted= unlist(lapply(as.list(1:length(thetaC)), function(x){
return(thetaC[[x]][which(thetaC[[x]]>0)])
}))
thetaUnlisted
change
thetaUnlisted + change
(summary(ans5)$varcomp[,1]/(var(yo)-4.8))
summary(ans4)$varcomp[,1]
ans5 <- mmer(Yield~Env,
random= ~vs(us(Env),Name), reshape.output = T,
rcov= ~ units, iters=1,
data=DT)
summary(ans5)$varcomp[,1]
summary(ans4)$varcomp[,1]
summary(ans4)$varcomp[,1]*1.2
summary(ans4)$varcomp[,1]*1.4
summary(ans4)$varcomp[,1]*1.34
summary(ans4)$varcomp[,1]*1.32
var(yo)
summary(ans4)$varcomp[,1]
summary(ans5)$varcomp[,1]
var(yo)/summary(ans5)$varcomp[,1]
summary(ans4)$varcomp[,1]
round(solve(AI),5)
round(solve(AIx),5)
dim(Zprovs)
dim(uu2sw)
Zprovs%*%uu2sw
###########################
# 3) calculate wu (working variates) (CORRECT)
# Notes on Estimation of Genetic Parameters
# wu = Zu/s2u
# we = e/s2e
###########################
Xb = X%*%b
Zu <- Wu <- uu <- list()
for(iR in 1:length(Z)){ # for each random effect
partitionsP = partitions[[iR]]
uu2 <- list()
usedPartitionList <- list()
usedPartitionList2 <- list()
for(irow in 1:nrow(partitionsP)){
usedPartition = partitionsP[irow,1]:partitionsP[irow,2]
usedPartitionList[[irow]] <- usedPartition - length(b)
usedPartitionList2[[irow]] <- ((nrow(y)*irow)-nrow(y)+1):(nrow(y)*irow)
uu2[[irow]] = bu[usedPartition] # u
}
uu2s <- do.call(adiag1,lapply(uu2,as.matrix))
uu2sw <- uu2s %*% lambda[[iR]]
# xxx <- do.call(cbind,lapply(uu2,as.matrix)) %*% lambda[[iR]]
# yyy <- split(xxx, rep(1:ncol(xxx), each = nrow(xxx)))
# uu2sw <- do.call(adiag1,lapply(yyy,as.matrix))
Zprovs <- do.call(adiag1, Z[[iR]])
Wus <- Zprovs %*% uu2sw
Zus <- Zprovs %*% uu2s
Wu2 <- Zu2 <- list();counter=1
vcs2 <- numeric()
for(irow in 1:nrow(partitionsP)){
for(icol in irow:nrow(partitionsP)){
vcs2[counter] <- lambda[[iR]][irow,icol]
if(thetaC[[iR]][irow,icol] > 0){
# Wu2[[counter]] <- ( do.call(cbind, Z[[iR]][unique(c(irow,icol))]) %*% unlist(uu2[unique(c(irow,icol))]) ) * lambda[[iR]][irow,icol]
# Zu2[[counter]] <- ( do.call(cbind, Z[[iR]][unique(c(irow,icol))]) %*% unlist(uu2[unique(c(irow,icol))]) )
if(irow == icol){
Wu2[[counter]] <- Z[[iR]][[irow]] %*% uu2sw[usedPartitionList[[icol]],icol]
Zu2[[counter]] <- Z[[iR]][[irow]] %*% uu2s[usedPartitionList[[icol]],icol]
# Wu2[[counter]] <- Wus[usedPartitionList2[[icol]],icol]
#
# Zu2[[counter]] <- Zus[usedPartitionList2[[icol]],icol]
# Wu2[[counter]] <- Z[[iR]][[irow]]%*%(uu2[[irow]]*lambda[[iR]][irow,irow])
#
# Zu2[[counter]] <- Z[[iR]][[irow]]%*%(uu2[[irow]])
}else{
# Wu2[[counter]] <- (Z[[iR]][[irow]] %*% uu2sw[usedPartitionList[[icol]],icol] +
#                      Z[[iR]][[icol]] %*% uu2sw[usedPartitionList[[irow]],irow])
Wu2[[counter]] <- Wus[usedPartitionList2[[icol]],irow] + Wus[usedPartitionList2[[irow]],icol]
#
# Zu2[[counter]] <- Zus[usedPartitionList2[[icol]],irow] + Zus[usedPartitionList2[[irow]],icol]
# Zu2[[counter]] <- (Z[[iR]][[irow]] %*% uu2s[usedPartitionList[[icol]],icol] +
#   Z[[iR]][[icol]] %*% uu2s[usedPartitionList[[irow]],irow])
# Wu2[[counter]] <- 1 * (
#   Z[[iR]][[irow]]%*%(uu2[[irow]]*lambda[[iR]][irow,icol]) + # Za (ua *sam)
#   Z[[iR]][[irow]]%*%(uu2[[icol]]*lambda[[iR]][icol,icol]) + # Za (um *sm)
#   Z[[iR]][[icol]]%*%(uu2[[irow]]*lambda[[iR]][irow,irow]) + # Zm (ua *sa)
#   Z[[iR]][[icol]]%*%(uu2[[icol]]*lambda[[iR]][irow,icol])  # Zm (um *sam)
# )
#
# Zu2[[counter]] <- 1 * (
#   Z[[iR]][[irow]]%*%(uu2[[irow]]) + # Za (ua *sam)
#   Z[[iR]][[irow]]%*%(uu2[[icol]]) + # Za (um *sm)
#   Z[[iR]][[icol]]%*%(uu2[[irow]]) + # Zm (ua *sa)
#   Z[[iR]][[icol]]%*%(uu2[[icol]])  # Zm (um *sam)
# )
}
# if(irow == icol){
#   uu.rc = do.call(cbind,uu2)
#   myorder <- c(irow,setdiff(1:ncol(uu.rc),irow))
#   uu.rc.th = apply(as.matrix(uu.rc[,myorder])%*%lambda[[iR]][irow,myorder],1,sum) # should be a matrix product or regular product?!!
#   Wu2[[counter]] <- Z[[iR]][[irow]]%*%uu.rc.th
#
#   fac=lambda[[iR]][irow,myorder]/lambda[[iR]][irow,myorder]; fac[which(is.nan(fac))]=0
#   uu.rc.th2 = apply(as.matrix(uu.rc[,myorder])%*%fac,1,sum)
#   Zu2[[counter]] <- Z[[iR]][[irow]]%*%uu.rc.th2
#
# }else{
#   uu.ij = cbind(uu2[[irow]],uu2[[icol]])
#   uu.ij1 = apply(as.matrix(uu.ij)%*%c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] ), 1, sum)
#   uu.ij2 = apply(as.matrix(uu.ij)%*%c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] ), 1, sum)
#   Wu2[[counter]] <- Z[[iR]][[irow]]%*%uu.ij1 + Z[[iR]][[icol]]%*%uu.ij2
#
#   fac=c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] )/c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] );fac[which(is.nan(fac))]=0
#   uu.ij1x = apply(as.matrix(uu.ij)%*%fac, 1, sum)
#   fac=c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] )/c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] );fac[which(is.nan(fac))]=0
#   uu.ij2x = apply(as.matrix(uu.ij)%*%fac, 1, sum)
#   Zu2[[counter]] <- Z[[iR]][[irow]]%*%uu.ij1x + Z[[iR]][[icol]]%*%uu.ij2x
# }
counter=counter+1
}
}
}
Wu[[iR]] = do.call(cbind, Wu2)#ZuiR%*%lambda[[iR]] # can be saved as cbind because will have same dimensions always
Zu[[iR]] = do.call(cbind, Zu2)
uu[[iR]] = uu2 # have to be saved by separate because may have different dimensions
}
e = y - (Xb + Reduce("+",lapply(Zu,function(x){matrix(apply(as.matrix(x),1,sum))})))
for(iS in 1:length(S)){
Wu[[iR+iS]] = S[[iS]]%*%(e%*%solve(theta[[ep]]))
}
plot(jkl$Yield2.residuals,e)
AI = matrix(NA, nrow=length(Wu), ncol=length(Wu))
Wx = do.call(cbind,Wu)
C=M[-nrow(M),-ncol(M)] # remove y from M to get the coefficient matrix C
XWj.ZWj = t(m)%*%Ri%*%Wx
WiX.WiZ = t(Wx)%*%Ri%*% m
WiWj= t(Wx)%*%Ri%*%Wx
MWu=rbind( cbind(C,(XWj.ZWj)) , cbind((WiX.WiZ),WiWj) )
MWuChol=try(chol(MWu,pivot=F), silent = TRUE)
if(class(MWuChol)=="try-error"){
MWuChol=try(chol(MWu+diag(tolparinv,nrow(MWu)),pivot=F), silent = FALSE)
}
# nTheta = sum(unlist(lapply(partitions,nrow))) + 1
nTheta = endvc[length(endvc)]
last=nrow(MWuChol); take = (last-nTheta+1):last
AI = (MWuChol[take,take]^2)
AI[lower.tri(AI)] <- t(AI)[lower.tri(AI)] # lower and upper are not equal (upper seems to be the right one to use)
round(AI,5)
round(solve(AI),5)
?vpredict
###########################
# 3) calculate wu (working variates) (CORRECT)
# Notes on Estimation of Genetic Parameters
# wu = Zu/s2u
# we = e/s2e
###########################
Xb = X%*%b
Zu <- Wu <- uu <- list()
for(iR in 1:length(Z)){ # for each random effect
partitionsP = partitions[[iR]]
uu2 <- list()
usedPartitionList <- list()
usedPartitionList2 <- list()
for(irow in 1:nrow(partitionsP)){
usedPartition = partitionsP[irow,1]:partitionsP[irow,2]
usedPartitionList[[irow]] <- usedPartition - length(b)
usedPartitionList2[[irow]] <- ((nrow(y)*irow)-nrow(y)+1):(nrow(y)*irow)
uu2[[irow]] = bu[usedPartition] # u
}
uu2s <- do.call(adiag1,lapply(uu2,as.matrix))
uu2sw <- uu2s %*% lambda[[iR]]
# xxx <- do.call(cbind,lapply(uu2,as.matrix)) %*% lambda[[iR]]
# yyy <- split(xxx, rep(1:ncol(xxx), each = nrow(xxx)))
# uu2sw <- do.call(adiag1,lapply(yyy,as.matrix))
Zprovs <- do.call(adiag1, Z[[iR]])
Wus <- Zprovs %*% uu2sw
Zus <- Zprovs %*% uu2s
Wu2 <- Zu2 <- list();counter=1
vcs2 <- numeric()
for(irow in 1:nrow(partitionsP)){
for(icol in irow:nrow(partitionsP)){
vcs2[counter] <- lambda[[iR]][irow,icol]
if(thetaC[[iR]][irow,icol] > 0){
# Wu2[[counter]] <- ( do.call(cbind, Z[[iR]][unique(c(irow,icol))]) %*% unlist(uu2[unique(c(irow,icol))]) ) * lambda[[iR]][irow,icol]
# Zu2[[counter]] <- ( do.call(cbind, Z[[iR]][unique(c(irow,icol))]) %*% unlist(uu2[unique(c(irow,icol))]) )
if(irow == icol){
Wu2[[counter]] <- Z[[iR]][[irow]] %*% uu2sw[usedPartitionList[[icol]],icol]
Zu2[[counter]] <- Z[[iR]][[irow]] %*% uu2s[usedPartitionList[[icol]],icol]
# Wu2[[counter]] <- Wus[usedPartitionList2[[icol]],icol]
#
# Zu2[[counter]] <- Zus[usedPartitionList2[[icol]],icol]
# Wu2[[counter]] <- Z[[iR]][[irow]]%*%(uu2[[irow]]*lambda[[iR]][irow,irow])
#
# Zu2[[counter]] <- Z[[iR]][[irow]]%*%(uu2[[irow]])
}else{
Wu2[[counter]] <- (Z[[iR]][[irow]] %*% uu2sw[usedPartitionList[[icol]],icol] +
Z[[iR]][[icol]] %*% uu2sw[usedPartitionList[[irow]],irow])/2
# Wu2[[counter]] <- Wus[usedPartitionList2[[icol]],irow] + Wus[usedPartitionList2[[irow]],icol]
#
# Zu2[[counter]] <- Zus[usedPartitionList2[[icol]],irow] + Zus[usedPartitionList2[[irow]],icol]
# Zu2[[counter]] <- (Z[[iR]][[irow]] %*% uu2s[usedPartitionList[[icol]],icol] +
#   Z[[iR]][[icol]] %*% uu2s[usedPartitionList[[irow]],irow])
# Wu2[[counter]] <- 1 * (
#   Z[[iR]][[irow]]%*%(uu2[[irow]]*lambda[[iR]][irow,icol]) + # Za (ua *sam)
#   Z[[iR]][[irow]]%*%(uu2[[icol]]*lambda[[iR]][icol,icol]) + # Za (um *sm)
#   Z[[iR]][[icol]]%*%(uu2[[irow]]*lambda[[iR]][irow,irow]) + # Zm (ua *sa)
#   Z[[iR]][[icol]]%*%(uu2[[icol]]*lambda[[iR]][irow,icol])  # Zm (um *sam)
# )
#
# Zu2[[counter]] <- 1 * (
#   Z[[iR]][[irow]]%*%(uu2[[irow]]) + # Za (ua *sam)
#   Z[[iR]][[irow]]%*%(uu2[[icol]]) + # Za (um *sm)
#   Z[[iR]][[icol]]%*%(uu2[[irow]]) + # Zm (ua *sa)
#   Z[[iR]][[icol]]%*%(uu2[[icol]])  # Zm (um *sam)
# )
}
# if(irow == icol){
#   uu.rc = do.call(cbind,uu2)
#   myorder <- c(irow,setdiff(1:ncol(uu.rc),irow))
#   uu.rc.th = apply(as.matrix(uu.rc[,myorder])%*%lambda[[iR]][irow,myorder],1,sum) # should be a matrix product or regular product?!!
#   Wu2[[counter]] <- Z[[iR]][[irow]]%*%uu.rc.th
#
#   fac=lambda[[iR]][irow,myorder]/lambda[[iR]][irow,myorder]; fac[which(is.nan(fac))]=0
#   uu.rc.th2 = apply(as.matrix(uu.rc[,myorder])%*%fac,1,sum)
#   Zu2[[counter]] <- Z[[iR]][[irow]]%*%uu.rc.th2
#
# }else{
#   uu.ij = cbind(uu2[[irow]],uu2[[icol]])
#   uu.ij1 = apply(as.matrix(uu.ij)%*%c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] ), 1, sum)
#   uu.ij2 = apply(as.matrix(uu.ij)%*%c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] ), 1, sum)
#   Wu2[[counter]] <- Z[[iR]][[irow]]%*%uu.ij1 + Z[[iR]][[icol]]%*%uu.ij2
#
#   fac=c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] )/c( lambda[[iR]][irow,icol], lambda[[iR]][icol,icol] );fac[which(is.nan(fac))]=0
#   uu.ij1x = apply(as.matrix(uu.ij)%*%fac, 1, sum)
#   fac=c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] )/c( lambda[[iR]][irow,irow], lambda[[iR]][irow,icol] );fac[which(is.nan(fac))]=0
#   uu.ij2x = apply(as.matrix(uu.ij)%*%fac, 1, sum)
#   Zu2[[counter]] <- Z[[iR]][[irow]]%*%uu.ij1x + Z[[iR]][[icol]]%*%uu.ij2x
# }
counter=counter+1
}
}
}
Wu[[iR]] = do.call(cbind, Wu2)#ZuiR%*%lambda[[iR]] # can be saved as cbind because will have same dimensions always
Zu[[iR]] = do.call(cbind, Zu2)
uu[[iR]] = uu2 # have to be saved by separate because may have different dimensions
}
e = y - (Xb + Reduce("+",lapply(Zu,function(x){matrix(apply(as.matrix(x),1,sum))})))
for(iS in 1:length(S)){
Wu[[iR+iS]] = S[[iS]]%*%(e%*%solve(theta[[ep]]))
}
AI = matrix(NA, nrow=length(Wu), ncol=length(Wu))
Wx = do.call(cbind,Wu)
C=M[-nrow(M),-ncol(M)] # remove y from M to get the coefficient matrix C
XWj.ZWj = t(m)%*%Ri%*%Wx
WiX.WiZ = t(Wx)%*%Ri%*% m
WiWj= t(Wx)%*%Ri%*%Wx
MWu=rbind( cbind(C,(XWj.ZWj)) , cbind((WiX.WiZ),WiWj) )
MWuChol=try(chol(MWu,pivot=F), silent = TRUE)
if(class(MWuChol)=="try-error"){
MWuChol=try(chol(MWu+diag(tolparinv,nrow(MWu)),pivot=F), silent = FALSE)
}
# nTheta = sum(unlist(lapply(partitions,nrow))) + 1
nTheta = endvc[length(endvc)]
last=nrow(MWuChol); take = (last-nTheta+1):last
AI = (MWuChol[take,take]^2)
AI[lower.tri(AI)] <- t(AI)[lower.tri(AI)] # lower and upper are not equal (upper seems to be the right one to use)
round(AI,5)
round(solve(AI),5)
# Ci <- solve(C)
Ci=try(solve(C), silent = TRUE)
if(class(Ci)=="try-error"){
Ci=try(ginv(C), silent = FALSE)
}
dLu = list()
dLe2 = list()
for(iR in 1:length(Wu)){
if(iR > length(Z)){ # sigma.e
dLe1 = (Nr - Nb)/theta[[iR]]
dLu[iR] =  -.5 * ( dLe1  - sum(unlist(lapply(dLe2, matrixcalc::matrix.trace))) - ((t(Wu[[iR]])%*%Wu[[iR]])) ) # We'We
}else{ # sigma.u
SigmaInv = lambda[[iR]]
omega<-omega2<-matrix(0,nrow = nrow(SigmaInv),ncol=ncol(SigmaInv))
for(k in 1:nrow(SigmaInv)){
for(l in 1:nrow(SigmaInv)){
if(thetaC[[iR]][k,l]>0){
usedPartitionK = partitions[[iR]][k,1]:partitions[[iR]][k,2]
usedPartitionL = partitions[[iR]][l,1]:partitions[[iR]][l,2]
trAiCuu = matrixcalc::matrix.trace((Ai[[iR]])%*%Ci[usedPartitionK,usedPartitionL])
omega[k,l] = trAiCuu + uu[[iR]][[k]]%*%Ai[[iR]]%*%uu[[iR]][[l]]
omega2[k,l] = ((Nus[iR])- (trAiCuu/theta[[iR]][k,l])) * (1/theta[[ep]])
}else{
omega[k,l] = 0
omega2[k,l] = 0
}
}
}
# omega[lower.tri(omega)] <- t(omega)[lower.tri(omega)]
# omega2[lower.tri(omega2)] <- t(omega2)[lower.tri(omega2)]
dLuProv = (- 0.5 * ( (Nus[iR]*SigmaInv) - (SigmaInv%*%omega%*%SigmaInv) ))#*thetaC[[iR]]
# dLuProv[upper.tri(dLuProv)] <- 2* dLuProv[upper.tri(dLuProv)] #+ t(dLuProv)[upper.tri(dLuProv)] # fill the upper triangular
# dLuProv= sqrt(t(dLuProv)%*%dLuProv)
# dLuProv[upper.tri(dLuProv)]=dLuProv[upper.tri(dLuProv)]
# print(dLuProv)
dLu[[iR]] = dLuProv[which(thetaC[[iR]]>0)]
# dLu[[iR]] = dLuProv[lower.tri(dLuProv, diag = TRUE)]
dLe2[[iR]] = omega2#( Nus[iR] - (trAiCuu/theta[iR]) ) * (1/theta[ep]) # trAiCuu/theta[iR]
}
}
dLu = unlist(dLu) # do.call(adiag1,dLu)#
# print(dLu)
###########################
# 7) update the variance paramters (CORRECT)
# PAPER FORMULA (Lee and Van der Werf, 2006)
# theta.n+1 = theta.n + (AIi * dL/ds2)
###########################
AIi <- solve(AI)
# print(dim(AIi))
# print(dim(dLu))
change = ((AIi%*%as.matrix(dLu))*taper[iiter])
change
thetaUnlisted= unlist(lapply(as.list(1:length(theta)), function(x){
return(theta[[x]][which(thetaC[[x]]>0)])
}))
thetaCUnlisted= unlist(lapply(as.list(1:length(thetaC)), function(x){
return(thetaC[[x]][which(thetaC[[x]]>0)])
}))
thetaUnlisted + change
round(solve(AI),5)
source('~/Desktop/sommer Extra/AImme3.R')
