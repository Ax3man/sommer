M = matrix(rho,dims,dims)
diag(M) <- 1
colnames(M) <- rownames(M) <- unx
return(M)
}
CS.mat(dat$colf)
cms(dat$colf)
as.factor(c(1:12,NA))
source('~/Desktop/tests6/sommer/R/FUN_relationships.R')
ar1(dat$colf)
?DT_cpdata
source('~/Desktop/tests6/sommer/R/FUN_relationships.R')
data(DT_cpdata)
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf)) + Colf,
rcov=~units,
data=DT)
summary(mix1)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf)) + vs(Colf, Gu=ar1(Colf)),
rcov=~units,
data=DT)
summary(mix1)
mix2 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT)
summary(mix1)$varcomp
summary(mix2)$varcomp
?spl2D
mix3 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ Rowf + Colf + vs(spl2D(Row,Col)),
rcov=~units,
data=DT)
summary(mix3)$varcomp
pin(mix3,h2~V1/(V1+V5))
summary(mix2)$varcomp
pin(mix2,h2~V1/(V1+V4))
pin(mix1,h2~V1/(V1+V4))
?besag.bayesian
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf)),# + vs(Colf, Gu=ar1(Colf)),
rcov=~units,
data=DT)
pin(mix1,h2~V1/(V1+V4))
summary(mix1)$varcomp
pin(mix1,h2~V1/(V1+V3))
seq(.1,.9,.1)
vals <- seq(.1,.9,.1)
for(i in vals){
print(i)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf, rho=i)),# + vs(Colf, Gu=ar1(Colf)),
rcov=~units,
data=DT)
# summary(mix1)$varcomp
print(pin(mix1,h2~V1/(V1+V3)))
}
# summary(mix1)$varcomp
print(pin(mix1,h2~V1/(V1+V3)))
# summary(mix1)$varcomp
h2s[counter] <- pin(mix1,h2~V1/(V1+V3))[1,1]
pin(mix1,h2~V1/(V1+V3))[1,1]
vals <- seq(.1,.9,.1)
h2s <- numeric()
counter <- 1
for(i in vals){
print(i)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf, rho=i)),# + vs(Colf, Gu=ar1(Colf)),
rcov=~units,
data=DT)
# summary(mix1)$varcomp
h2s[counter] <- pin(mix1,h2~V1/(V1+V3))[1,1]
counter <- counter+1
}
plot(h2s)
plot(y=h2s,x=vals)
vals <- seq(.1,.9,.1)
h2s <- numeric()
counter <- 1
for(i in vals){
print(i)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Colf, Gu=ar1(Colf, rho=i)),# + vs(Colf, Gu=ar1(Colf)),
rcov=~units,
data=DT)
# summary(mix1)$varcomp
h2s[counter] <- pin(mix1,h2~V1/(V1+V3))[1,1]
counter <- counter+1
}
plot(y=h2s,x=vals)
vals <- seq(.1,.9,.1)
h2s <- numeric()
counter <- 1
for(i in vals){
print(i)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf, rho=i)) + vs(Colf, Gu=ar1(Colf,rho=i)),
rcov=~units,
data=DT)
# summary(mix1)$varcomp
h2s[counter] <- pin(mix1,h2~V1/(V1+V3))[1,1]
counter <- counter+1
}
ar1(DT$Rowf, rho=0)
plot(y=h2s,x=vals)
summary(mix1)$varcomp
vals <- seq(0,.9,.1)
h2s <- numeric()
counter <- 1
for(i in vals){
print(i)
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A)
+ vs(Rowf, Gu=ar1(Rowf, rho=i)) + vs(Colf, Gu=ar1(Colf,rho=i)),
rcov=~units,
data=DT)
# summary(mix1)$varcomp
h2s[counter] <- pin(mix1,h2~V1/(V1+V4))[1,1]
counter <- counter+1
}
plot(y=h2s,x=vals)
plot(y=h2s,x=vals,ylim=c(0,1))
plot(y=h2s,x=vals)#,ylim=c(0,1))
head(DT)
plot(y=h2s,x=vals,ylim=c(0,1))
source('~/Desktop/tests6/sommer/R/FUN_relationships.R')
cs1CompSymm <- corCompSymm(value = 0.25, form = ~ 1 | Subject)
cs1CompSymm <- Initialize(cs1CompSymm, data = Orthodont)
corMatrix(cs1CompSymm)[[1]]
cs1CAR1 <- corCAR1(0.8, form = ~ 1 | Subject)
cs1CAR1 <- Initialize(cs1CAR1, data = Orthodont)
corMatrix(cs1CAR1)[[1]]
ar1(1:4,0.8)
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 1)
cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
corMatrix(cs1ARMA)[[1]]
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 2)
cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
corMatrix(cs1ARMA)[[1]]
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 0.5)
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 1)
cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
corMatrix(cs1ARMA)[[1]]
?corARMA
require(mvtnorm)
arima.sim
?arima.sim
?nlme
?lme
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, p=0,q = 1)
cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
corMatrix(cs1ARMA)[[1]]
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, p=1,q = 1)
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, p=0.5,q = 1)
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, p=0,q = 1)
cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
corMatrix(cs1ARMA)[[1]]
?corARMA
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, p=0,q = 2)
## ARMA(1,2) structure, with observation order as a covariate and
## Mare as grouping factor
cs1 <- corARMA(c(0.2, 0.3, -0.1), form = ~ 1 | Mare, p = 1, q = 2)
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, p=1,q = 2)
## ARMA(1,2) structure, with observation order as a covariate and
## Mare as grouping factor
cs1 <- corARMA(c(0.2, 0.3, -0.1), form = ~ 1 | Mare, p = 1, q = 2)
cs1
# Pinheiro and Bates, p. 237
cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 1)
cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
corMatrix(cs1ARMA)
cs2ARMA <- corARMA(c(0.8, 0.4), form = ~ 1 | Subject, p=1, q=1)
cs2ARMA <- Initialize(cs2ARMA, data = Orthodont)
corMatrix(cs2ARMA)
corARMA
Initialize
cs2ARMA
cs2ARMA <- corARMA(c(0.5, 0.5), form = ~ 1 | Subject, p=0, q=1)
## ARMA(1,2) structure, with observation order as a covariate and
## Mare as grouping factor
cs1 <- corARMA(c(0.2, 0.3, -0.1), form = ~ 1 | Mare, p = 1, q = 2)
cs1
## ARMA(1,2) structure, with observation order as a covariate and
## Mare as grouping factor
cs1 <- corARMA(c(0.2, 0.3, -0.1), form = ~ 1 | Mare, p = 1, q = 2)
cs1
## ARMA(1,2) structure, with observation order as a covariate and
## Mare as grouping factor
cs1 <- corARMA(c(0.2, 0.3, -0.1), form = ~ 1 | Mare, p = 1, q = 1)
cs2ARMA <- corARMA(c(0.5, 0.5), form = ~ 1 | Subject, p=0, q=1)
cs2ARMA <- corARMA(c(0.5, 0.5,.5), form = ~ 1 | Subject, p=0, q=1)
?data
data(package="sommer")
arma = function(x, rho=0.5, lambda=0.5) {
## for ar
unx <- levels(as.factor(x))
dimo <- length(unx)
M = diag(dimo)
M = abs(row(M)-col(M))
M[lower.tri(M)] <- M[lower.tri(M)]-1
M[upper.tri(M)] <- M[upper.tri(M)]-1
MM <- rho^M
## for lam
N <- matrix(lambda,dimo,dimo)
diag(N) <- 0
## final
MN <- MM*N
return(MN)
}
arma(1:4)
arma = function(x, rho=0.5, lambda=0.5) {
## for ar
unx <- levels(as.factor(x))
dimo <- length(unx)
M = diag(dimo)
M = abs(row(M)-col(M))
M[lower.tri(M)] <- M[lower.tri(M)]-1
M[upper.tri(M)] <- M[upper.tri(M)]-1
MM <- rho^M
## for lam
N <- matrix(lambda,dimo,dimo)
# diag(N) <- 0
## final
MN <- MM*N
return(MN)
}
arma(1:4)
arma = function(x, rho=0.5, lambda=0.5) {
## for ar
unx <- levels(as.factor(x))
dimo <- length(unx)
M = diag(dimo)
M = abs(row(M)-col(M))
M[lower.tri(M)] <- M[lower.tri(M)]-1
M[upper.tri(M)] <- M[upper.tri(M)]-1
MM <- rho^M
## for lam
N <- matrix(lambda,dimo,dimo)
diag(N) <- 1
## final
MN <- MM*N
return(MN)
}
arma(1:4)
arma(1:4,.2)
source('~/Desktop/tests6/sommer/R/FUN_relationships.R')
source('~/Desktop/tests6/sommer/R/FUN_relationships.R')
source('~/Desktop/tests6/sommer/R/FUN_relationships.R')
?leg
data("DT_cpdata")
head(DT)
GT[1:4,1:4]
#### create the variance-covariance matrix
A <- A.mat(GT)
#### look at the data and fit the model
head(DT)
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + Rowf,
rcov=~units,
data=DT)
summary(mix1)$varcomp
#### calculate heritability
pin(mix1, h1 ~ V1/(V1+V3) )
summary(mix1)
data("DT_example")
head(DT)
DT$Loc
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),diag(Loc),Name),
rcov=~vs(us(Env),units),
data=DT)
dim(DT)
s <-vs(us(DT$Env),diag(DT$Loc),DT$Name)
s <-vs(us(DT$Env),DT$Name)
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),diag(Loc),Name),
rcov=~vs(us(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),ds(Loc),Name),
rcov=~vs(us(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),ds(Loc),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
ans3$sigma_scaled
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(ds(Env),ds(Env),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(ds(Loc),ds(Year),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(ds(Year),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(ds(Loc),us(Year),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
head(DT)
ans3 <- mmer(Yield~Env,
random=~ vs(ds(Loc),us(Year),Name) + vs(ds(Block),Name),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(ds(Loc),us(Year),Name) + vs(ds(Year),Block),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
head(DT)
ans3 <- mmer(Yield~Env+Weight,
random=~ vs(ds(Loc),us(Year),Name) + vs(ds(Year),Block),
rcov=~vs(ds(Env),units),
data=DT)
summary(ans3)
?mmer
library(sommer)
data("DT_cpdata")
head(DT)
GT[1:4,1:4]
#### create the variance-covariance matrix
A <- A.mat(GT)
#### look at the data and fit the model
head(DT)
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + Rowf,
rcov=~units,
data=DT)
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + vs(Rowf,Gu=AR1(Rowf)),
rcov=~units,
data=DT)
summary(mix1)$varcomp
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + vs(Rowf,Gu=AR1(Rowf,0.5)),
rcov=~units,
data=DT)
summary(mix1)$varcomp
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + vs(Rowf,Gu=AR1(Rowf,0.5)) + Rowf:Colf,
rcov=~units,
data=DT)
summary(mix1)$varcomp
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + vs(Rowf,Gu=AR1(Rowf,0.5)) + vs(Rowf:Colf),
rcov=~units,
data=DT)
summary(mix1)$varcomp
kronecker(AR1(DT$Rowf),AR1(DT$Colf))
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf,Gu=AR1(Rowf,0.5)) +
vs(Rowf:Colf, Gu=kronecker(AR1(Rowf),AR1(Colf))),
rcov=~units,
data=DT)
?kronecker
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf,Gu=AR1(Rowf,0.5)) +
vs(Rowf:Colf, Gu=kronecker(AR1(Rowf),AR1(Colf), make.dimnames = T)),
rcov=~units,
data=DT)
summary(mix1)$varcomp
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf,Gu=AR1(Rowf,0.5)) +
vs(Colf,Gu=AR1(Rowf,0.1)) +
vs(Rowf:Colf, Gu=kronecker(AR1(Rowf),AR1(Colf), make.dimnames = T)),
rcov=~units,
data=DT)
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf,Gu=AR1(Rowf,0.5)) +
vs(Colf,Gu=AR1(Colf,0.1)) +
vs(Rowf:Colf, Gu=kronecker(AR1(Rowf),AR1(Colf), make.dimnames = T)),
rcov=~units,
data=DT)
summary(mix1)$varcomp
pin(mix1,h2~V1/(V1+V5))
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf,Gu=AR1(Rowf,0.5)) +
vs(Colf,Gu=AR1(Colf,0.1)) +
vs(Rowf:Colf, Gu=kronecker(AR1(Rowf,0.5),AR1(Colf,0.1), make.dimnames = T)),
rcov=~units,
data=DT)
summary(mix1)$varcomp
pin(mix1,h2~V1/(V1+V5))
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + Rowf + Colf
# vs(Rowf,Gu=AR1(Rowf,0.5)) +
# vs(Colf,Gu=AR1(Colf,0.1)) +
# vs(Rowf:Colf, Gu=kronecker(AR1(Rowf,0.5),AR1(Colf,0.1), make.dimnames = T))
,
rcov=~units,
data=DT)
summary(mix1)$varcomp
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + Rowf + Colf
# vs(Rowf,Gu=AR1(Rowf,0.5)) +
# vs(Colf,Gu=AR1(Colf,0.1)) +
+ vs(Rowf:Colf, Gu=kronecker(AR1(Rowf,0.5),AR1(Colf,0.1), make.dimnames = T))
,
rcov=~units,
data=DT)
summary(mix1)$varcomp
pin(mix1,h2~V1/(V1+V5))
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + Rowf + Colf
# vs(Rowf,Gu=AR1(Rowf,0.5)) +
# vs(Colf,Gu=AR1(Colf,0.1)) +
# + vs(Rowf:Colf, Gu=kronecker(AR1(Rowf,0.5),AR1(Colf,0.1), make.dimnames = T))
,
rcov=~units,
data=DT)
pin(mix1,h2~V1/(V1+V4))
(.02*100)/.21
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) + Rowf + Colf
# vs(Rowf,Gu=AR1(Rowf,0.5)) +
# vs(Colf,Gu=AR1(Colf,0.1)) +
+ vs(Rowf:Colf, Gu=kronecker(AR1(Rowf,0.5),AR1(Colf,0.1), make.dimnames = T))
,
rcov=~units,
data=DT)
summary(mix1)$varcomp
(.06*100)/0.17
AR1(1:4)
## Giovanny E. Covarrubias-Pazaran
## This file is part of the sommer-package training course.
## sommer is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 2 of the License, or
## (at your option) any later version.
## -----------------------
## -----------------------
## -----------------------
## -----------------------
library(sommer)
library(agridat)
library(agricolae)
data(example)
head(example)
## All fixed effects
ans0 <- lm(Yield~Env + Name + Env:Name,
data=example)
## All fixed effects
ans0 <- lm(Yield~Env + Name + Env:Name,
data=DT)
## All fixed effects
data("DT_example")
ans0 <- lm(Yield~Env + Name + Env:Name,
data=DT)
summary(ans0)
ans1.1 <- mmer(Yield~Env,
random= ~ Env:Name,
rcov= ~ units,
data=example)
ans1.1 <- mmer(Yield~Env,
random= ~ Env:Name,
rcov= ~ units,
data=DT)
summary(ans1.1)
ans1.1 <- mmer(Yield~Env,
#random= ~ Env:Name,
rcov= ~ units,
data=DT)
summary(ans1.1)
?sommer
?arma
?ARMA
ARMA(1:4)
ARMA(1:4,.5)
ARMA(1:4,.5,.)
ARMA(1:4,.5,.5)
.<-5
.
" <- .5
~
,
