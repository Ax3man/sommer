which(N[,,1]>0, arr.ind = TRUE)
N[which(N[,,1]>0, arr.ind = TRUE),,1]
N[which(N[,,1]>0, arr.ind = TRUE),1]
N[which(N[,,1]>0),,1]
which(N[,,1]>0)
which(N[,,1]>0)
N[which(N[,,1]>0),1]
N[which(N[,,1]>0),,1]
nrep=median(N[,,1])
nrep
nrep=table(median(N[,,1]))
nrep
nrep=table(N[,,1])
nrep
nrep=table(N[,,1])
nrep[which(names(nrep) !=0)]
names(nrep[which(names(nrep) !=0)])
nrep=as.numeric(names(nrep[which(names(nrep) !=0)]))
nrep
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=length(unique(DT$rep))
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vm <- (ms1-ms2)/(nrep*nfem); Vm
mix <- lm(y ~ x)
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp; vc
Vfm <- vc[1,"VarComp"]
Vm <- vc[2,"VarComp"]
Vf <- vc[3,"VarComp"]
Vfm
Vf
Vm
nrep
nmal
N
which(N[1,,1] > 0)
nmale
nmale=length(which(N[1,,1] > 0))
nfemale=length(which(N[,1,1] > 0))
nmale
nfemale
N=with(DT,table(female, male, set))
nmale=length(which(N[1,,1] > 0))
nfemale=length(which(N[,1,1] > 0))
nrep=table(N[,,1])
nrep=as.numeric(names(nrep[which(names(nrep) !=0)]))
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=length(unique(DT$rep))
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vm <- (ms1-ms2)/(nrep*nfem); Vm
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp; vc
nmale
nfemale
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vf <- (ms2-ms3)/(nrep*nmal); Vf*2
Vm <- (ms1-ms2)/(nrep*nfem); Vm
Vm <- (ms1-ms3)/(nrep*nfem); Vm
Vm <- (ms1-ms3)/(nrep*nfem); Vm*2
vc <- summary(mix2)$varcomp; vc
Vf <- (ms2-ms3)/(nrep*nmal); Vf
nmal
nrep
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmale); Vf
Vm <- (ms1-ms3)/(nrep*nfemale); Vm
vc <- summary(mix2)$varcomp; vc
Va=4*Vm; Va # assuming no inbreeding (4/(1+F))
Va=4*Vf; Va # assuming no inbreeding (4/(1+F))
Vd=4*(Vfm);Vd # assuming no inbreeding(4/(1+F)^2)
vc <- summary(mix2)$varcomp; vc
Vfm <- vc[1,"VarComp"]
Vm <- vc[2,"VarComp"]
Vf <- vc[3,"VarComp"]
Va=4*Vm; Va # assuming no inbreeding (4/(1+F))
Va=4*Vf; Va # assuming no inbreeding (4/(1+F))
Vd=4*(Vfm);Vd # assuming no inbreeding(4/(1+F)^2)
DT <- DT_expdesigns$car1
DT <- aggregate(yield~set+male+female+rep, data=DT, FUN = mean)
DT$setf <- as.factor(DT$set)
DT$repf <- as.factor(DT$rep)
DT$malef <- as.factor(DT$male)
DT$femalef <- as.factor(DT$female)
levelplot(yield~male*female|set, data=DT, main="NC desing I")
head(DT)
N=with(DT,table(female, male, set))
nmale=length(which(N[1,,1] > 0))
nfemale=length(which(N[,1,1] > 0))
nrep=table(N[,,1])
nrep=as.numeric(names(nrep[which(names(nrep) !=0)]))
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=length(unique(DT$rep))
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmale); Vf
Vm <- (ms1-ms3)/(nrep*nfemale); Vm
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp; vc
?DT_expdesigns
library(lme4);
library(lmerTest)
library(nlme)
library(glmmTMB)
install.packages("glmmTMB")
library(sommer)
library(glmmTMB)
dat <- agridat::john.alpha
# Fit models
mod.lme4 <- lme4::lmer(formula = yield ~ rep + (1|gen),  data = dat)
mod.glmmTMB <- glmmTMB::glmmTMB(formula = yield ~ rep + (1|gen),  data = dat, REML = TRUE) # default is ML!
mod.nlme <- nlme::lme(fixed = yield ~ rep, random = ~1|gen, data = dat)
mod.sommer <- sommer::mmer(fixed = yield ~ rep, random = ~ gen, data = dat)  #
AIC AIC(mod.lme4)
AIC(mod.lme4)
AIC(mod.glmmTMB)
AIC(mod.nlme)
mod.sommer$AIC
summary(mod.lme4)
summary(mod.glmmTMB) #101.8
summary(mod.lme4) #101.8
summary(mod.nlme) #101.8
summary(mod.lme4) #101.8
50.9*2
summary(mod.sommer)
AIC(mod.glmmTMB)
summary(mod.lme4) #101.8 (2ln(L))
mod.sommer$Beta
mod.sommer$monitor[1,]
mod.sommer$monitor[1,5]
mod.sommer$AIC
AIC(mod.nlme)
k=3
ll=-50.89
aic <- (2*k) - 2*ll;aic
k=5
ll=-50.89
aic <- (2*k) - 2*ll;aic
k=5 # (3 blues + 2 variance components) # number of parameters estimated
ll=-50.89 # log likelihood
aic <- (2*k) - 2*ll;aic
summary(mod.glmmTMB) #-50.9
AIC(mod.lme4)
AIC(mod.glmmTMB)
AIC(mod.nlme)
aic <- (2*k) - 2*ll;aic
summary(mod.nlme) #-50.89
k=5 # (3 blues + 2 variance components) # number of parameters estimated
ll=-16.85349# log likelihood
aic <- (2*k) - 2*ll;aic
mod.sommer$AIC
AIC
?AIC
k=3 # (3 blues + 2 variance components) # number of parameters estimated
summary(mod.sommer) # -16.85349
mod.sommer$U$gen$yield
length(mod.sommer$U$gen$yield)
k=3+24 # (3 blues + 2 variance components) # number of parameters estimated
ll=-50.899 # log likelihood
aic <- (2*k) - 2*ll;aic
summary(mod.nlme) #-50.899
k= 1# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.89981 # log likelihood
aic <- (2*k) - (2*ll);aic
AIC(mod.nlme)
k= 5# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.89981 # log likelihood
aic <- (2*k) - (2*ll);aic
AIC(mod.nlme)
k=3 # (3 blues + 2 variance components) # number of parameters estimated
ll=-16.85349# log likelihood
aic <- (2*k) - 2*ll;aic
mod.sommer$AIC
head(dat)
# Fit models
mod.lme4 <- lme4::lmer(formula = yield ~ rep + (1|gen) + (1|block),  data = dat)
mod.glmmTMB <- glmmTMB::glmmTMB(formula = yield ~ rep + (1|gen) + (1|block),  data = dat, REML = TRUE) # default is ML!
mod.nlme <- nlme::lme(fixed = yield ~ rep, random = ~1|gen + 1|block, data = dat)
mod.sommer <- sommer::mmer(fixed = yield ~ rep, random = ~ gen + block, data = dat)  #
AIC(mod.lme4)
AIC(mod.glmmTMB)
AIC(mod.nlme)
mod.sommer$AIC
AIC(mod.lme4)
k= 5# (3 blues + 2 variance components) # number of parameters estimated
summary(mod.lme4) #101.8 (2ln(L))
summary(mod.glmmTMB) #-50.9
k= 5# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.7 # log likelihood in the first 3 models
aic <- (2*k) - (2*ll);aic
AIC(mod.lme4)
summary(mod.lme4) #101.8 (2ln(L))
k= 6# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.7 # log likelihood in the first 3 models
aic <- (2*k) - (2*ll);aic
AIC(mod.lme4)
library(sommer)
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
mix1 <- mmer(Yield~1,
random=~vs(id,Gu=A),
rcov=~units,
data=DT, verbose = FALSE)
mix1$sigma$`u:id`
mm <- matrix(3,1,1) ## matrix to fix the var comp
initialVal <- mix1$sigma_scaled$`u:id`/2 # we want to fix the vc to be half of the previous uinvariate m
initialVal
mm
mm <- matrix(3,1,1) ## matrix to fix the var comp
initialVal <- mix1$sigma_scaled$`u:id`/2 # we want to fix the vc to be half of the previous uinvariate model
mix3 <- mmer(Yield~1,
random=~vs(id, Gu=A, Gt=initialVal, Gtc=mm), # constrained
rcov=~vs(units), # unconstrained
data=DT, verbose = FALSE)
summary(mix1)$varcomp
summary(mix2)$varcomp
summary(mix1)$varcomp
summary(mix3)$varcomp
install.packages("~/Desktop/sommer_4.1.0.tar.gz", repos = NULL, type = "source")
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("sommer.qg.Rmd", pdf_document())
render("1.sommer.quick.start.Rmd", pdf_document())
render("2.sommer.changes.and.faqs.Rmd", pdf_document())
render("2.sommer.changes.and.faqs.Rmd", pdf_document())
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("3.sommer.qg.Rmd", pdf_document())
render("4.sommer.gxe.Rmd", pdf_document())
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("3.sommer.qg.Rmd", pdf_document())
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
### mimic two fields
A <- A.mat(GT)
mix1 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf) +
vs(Colf),
rcov=~vs(units),
data=DT)
mix2 <- mmer(Yield~1,
random=~vs(id, Gu=A) +
vs(Rowf) +
vs(Colf) +
vs(spl2D(Row,Col)),
rcov=~vs(units),
data=DT)
anova(mix1, mix2)
anova(mix2, mix1)
data(DT_example)
DT <- DT_example
DT$EnvName <- paste(DT$Env,DT$Name)
modelBase <- mmer(cbind(Yield, color) ~ Env,
random= ~ vs(us(Env),Name, Gtc=diag(2)), # here is diag()
rcov= ~ vs(ds(Env),units, Gtc=unsm(2)),
data=DT)
modelCov <- mmer(cbind(Yield, color) ~ Env,
random= ~ vs(us(Env),Name, Gtc=unsm(2)), # here is unsm()
rcov= ~ vs(ds(Env),units, Gtc=unsm(2)),
data=DT)
data(DT_example)
DT <- DT_example
DT$EnvName <- paste(DT$Env,DT$Name)
modelBase <- mmer(cbind(Yield, color) ~ Env,
random= ~ vs(us(Env),Name, Gtc=diag(2)), # here is diag()
rcov= ~ vs(ds(Env),units, Gtc=unsm(2)),
data=DT)
head(DT)
modelBase <- mmer(cbind(Yield, color) ~ Env,
random= ~ vs(Name, Gtc=diag(2)), # here is diag()
rcov= ~ vs(units, Gtc=unsm(2)),
data=DT)
modelBase <- mmer(cbind(Yield, Weight) ~ Env,
random= ~ vs(Name, Gtc=diag(2)), # here is diag()
rcov= ~ vs(units, Gtc=unsm(2)),
data=DT)
modelCov <- mmer(cbind(Yield, Weight) ~ Env,
random= ~ vs(us(Env),Name, Gtc=unsm(2)), # here is unsm()
rcov= ~ vs(ds(Env),units, Gtc=unsm(2)),
data=DT)
anova(modelBase, modelCov)
anova(modelBase, modelCov)
fixm(3)
uncm(3)
data(DT_example)
DT <- DT_example
A <- A_example
## ============================ ##
## example to without structure
## ============================ ##
ds(DT$Year)
mix <- mmer(Yield~Env,
random= ~ vs(Name),
rcov=~ vs(units),
data=DT)
## ============================ ##
## example to without structure but using covariance
## ============================ ##
ds(DT$Year)
mix <- mmer(Yield~Env,
random= ~ vs(Name, Gu=A),
rcov=~ vs(units),
data=DT)
?cs
x <- as.factor(c(1:5,1:5,1:5));x
cs(x,matrix(1,5,5))
?sommer
render("1.sommer.quick.start.Rmd", pdf_document())
render("2.sommer.changes.and.faqs.Rmd", pdf_document())
render("3.sommer.qg.Rmd", pdf_document())
render("4.sommer.gxe.Rmd", pdf_document())
?fcm
?mmer
vignette("sommer.start")
mix$sigmaVector
mix$sigma
mix$sigma_scaled
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
summary(mix1)
ms <- as.data.frame(t(mix1$scores))
ms$Locus <- rownames(ms)
MP2 <- merge(MP,ms,by="Locus",all.x = TRUE);
manhattan(MP2, pch=20,cex=.5, PVCN = "color score")
mix1$scores[1:2,1:4]
mix1$scores[,1:4]
citation("sommer")
packageStartupMessage(magenta("[]   Dedicated to the University of Chapingo and the UW-Madison     []"),appendLF=TRUE)
packageStartupMessage(magenta("[]   Type 'vignette('sommer.quick.start')' for a short tutorial []"),appendLF=TRUE)
packageStartupMessage(magenta("[]   Dedicated to the University of Chapingo and the UW-Madison     []"),appendLF=TRUE)
packageStartupMessage(magenta("[]   Type 'vignette('sommer.quick.start')' for a short tutorial   []"),appendLF=TRUE)
packageStartupMessage(magenta("[]   Dedicated to the University of Chapingo and the UW-Madison     []"),appendLF=TRUE)
packageStartupMessage(magenta("[]   Type 'vignette('sommer.quick.start')' for a short tutorial     []"),appendLF=TRUE)
W <- matrix(rnorm(20000000), ncol = 10000)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
y <- rowSums(W[, 1:10]) + rowSums(W[, 1001:1010]) + rnorm(nrow(W))
# Create model
data <- data.frame(y = y, mu = 1)
fm <- y ~ 0 + mu
X <- model.matrix(fm, data = data)
library(qgg)
library(devtools)
library(sommer)
install.packages("devtools")
library(devtools)
devtools::install_github("psoerensen/qgg")
library(sommer)
data(DT_technow)
DT <- DT_technow
Md <- Md_technow
Mf <- Mf_technow
Ad <- Ad_technow
Af <- Af_technow
# RUN THE PREDICTION MODEL
y.trn <- DT
vv1 <- which(!is.na(DT$GY))
vv2 <- sample(vv1, 100)
y.trn[vv2,"GY"] <- NA
anss2 <- mmer(GY~1,
random=~vs(dent,Gu=Ad) + vs(flint,Gu=Af),
rcov=~units,
data=y.trn)
source('~/Desktop/sommer/R/FUN_utils.R')
source('~/Desktop/sommer/R/FUN_special.R')
source('~/Desktop/sommer/R/mmer.R')
anss2 <- mmer(GY~1,
random=~vs(dent,Gu=Ad) + vs(flint,Gu=Af),
rcov=~units,
data=y.trn)
source('~/Desktop/sommer/R/FUN_special.R')
source('~/Desktop/sommer/R/FUN_utils.R')
source('~/Desktop/sommer/R/mmer.R')
anss2 <- mmer(GY~1,
random=~vs(dent,Gu=Ad) + vs(flint,Gu=Af),
rcov=~units,
data=y.trn)
library(qgg)
W <- matrix(rnorm(20000000), ncol = 10000)
colnames(W) <- as.character(1:ncol(W))
rownames(W) <- as.character(1:nrow(W))
y <- rowSums(W[, 1:10]) + rowSums(W[, 1001:1010]) + rnorm(nrow(W))
# Create model
data <- data.frame(y = y, mu = 1)
fm <- y ~ 0 + mu
X <- model.matrix(fm, data = data)
# Compute GRM
GRM <- grm(W = W)
# REML analyses
fitG <- greml(y = y, X = X, GRM = list(GRM))
GRM[1:4,1:4]
data$id <- 1:nrow(W)
fm <- y ~ 0 + mu
X <- model.matrix(fm, data = data)
# Compute GRM
GRM <- grm(W = W)
dim(GRM)
fitG2 <- mmer(y~1, random=~vs(id,Gu=GRM), data=data)
head(data)
data$id <- as.factor(1:nrow(W))
fitG2 <- mmer(y~1, random=~vs(id,Gu=GRM), data=data)
# REML analyses
system.time(fitG <- greml(y = y, X = X, GRM = list(GRM)))
fitG$theta
fitG2$sigma
fitG$asd
fitG2$sigmaSE
fitG$niter
fitG$trPG
greml
?greml
summary(fitG2)
summary(fitG)
install.packages("~/Desktop/sommer_4.1.1.tar.gz", repos = NULL, type = "source")
library(sommer)
?sommer
library(lme4)
?lme4
?mmer
data(DT_example)
DT <- DT_example
head(DT)
####=========================================####
#### Univariate homogeneous variance models  ####
####=========================================####
## Compound simmetry (CS) model
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
data=DT)
summary(ans1)
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),Name),
rcov=~vs(us(Env),units),
data=DT)
data("DT_cornhybrids")
DT <- DT_cornhybrids
DTi <- DTi_cornhybrids
GT <- GT_cornhybrids
fm1 <- lmer(Yield ~ Location + (1|GCA1) + (1|GCA2) + (1|SCA),
data=DT )
out <- mmer(Yield ~ Location,
random = ~ GCA1 + GCA2 + SCA,
rcov = ~ units,
data=DT)
summary(fm1)
summary(out)
