mix3 <- mmer(Yield~1,
random=~vs(id, Gu=A)
+ vs(idd, Gu=D),
rcov=~vs(units),
data=DT)
summary(mix3)$varcomp
summary(mix2)$varcomp
?DT_expdesigns
data(DT_expdesigns)
DT <- DT_expdesigns$spd
head(DT)
DT <- DT_expdesigns$car1
head(DT)
levelplot(yield~male*female, data=DT)
with(DT,table(set,male, female))
with(DT,table(male, female, set))
head(DT)
mix <- mmer(yield~male+female, data=DT)
summary(mix)
anova(mix)
mix <- lm(yield~male+female, data=DT)
anova(mix)
mix <- lm(yield~male+female+set, data=DT)
anova(mix)
mix <- mmer(yield~1,
random=~male+female, data=DT)
summary(mix)$varcomp
mix <- mmer(yield~1,
random=~female, data=DT)
summary(mix)$varcomp
mix <- mmer(yield~1,
random=~vs(at(set),female), data=DT)
summary(mix)$varcomp
DT$setf <- as.factor(DT$set)
mix <- mmer(yield~1,
random=~vs(at(setf),female), data=DT)
summary(mix)$varcomp
mix <- mmer(yield~1,
random=~vs(at(setf),male), data=DT)
summary(mix)$varcomp
with(DT,table(male, female, set))
mix <- mmer(yield~male+female:male:set + male:set, data=DT)
DT$setf <- as.factor(DT$set)
DT$setf <- as.factor(DT$set)
DT$malef <- as.factor(DT$male)
DT$femalef <- as.factor(DT$female)
head(DT)
mix <- mmer(yield~malef+femalef:malef:setf + malef:setf, data=DT)
summary(mix)
anova(mix)
mix <- mmer(yield~ set + malef + femalef:malef:setf + malef:setf, data=DT)
summary(mix)
anova(mix)
mix <- lm(yield~~malef+femalef:malef:setf + malef:setf, data=DT)
mix <- lm(yield~malef+femalef:malef:setf + malef:setf, data=DT)
anova(mix)
mix1 <- lm(yield~malef+femalef:malef:setf + malef:setf, data=DT)
anova(mix)
mix2 <- mmer(yield~ 1
random=~set + malef + femalef:malef:setf + malef:setf,
data=DT)
mix2 <- mmer(yield~ 1,
random=~set + malef + femalef:malef:setf + malef:setf,
data=DT)
summary(mix2)
MS <- anova(mix)
MS$`Mean Sq`
MS
MS["malef",`Mean Sq`]
MS["malef","Mean Sq"]
mix1 <- lm(yield~set+femalef:malef:setf + malef:setf, data=DT)
MS <- anova(mix)
MS
mix1 <- lm(yield~ set + femalef:malef:setf + malef:setf, data=DT)
MS <- anova(mix1)
MS
mix2 <- mmer(yield~ 1,
random=~set + femalef:malef:setf + malef:setf,
data=DT)
summary(mix2)
summary(mix2)$varcomp
MS
mix2 <- mmer(yield~ set,
random=~femalef:malef:setf + malef:setf,
data=DT)
summary(mix2)$varcomp
mix1 <- lm(yield~ set + femalef:malef:setf + malef:setf, data=DT)
MS <- anova(mix1)
MS
ms1 <- MS["malef:setf","Mean Sq"]
ms1 <- MS["malef:setf","Mean Sq"]
ms2 <- MS["femalef:malef:setf","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
ms2-mse
with(DT,table(male, female, set))
head(DT)
unique(DT$rep)
Vf.m <- (ms2-mse)/2
Vf.m
summary(mix2)$varcomp
aggregate(rep~set+malef+femalef, data=DT, FUN = sum)
Vf.m <- (ms2-mse)/9;Vf.m
summary(mix2)$varcomp
head(DT)
DT2 <- aggregate(yield~set+male+female+rep, data=DT, FUN = mean)
head(DT2)
DT <- aggregate(yield~set+male+female+rep, data=DT, FUN = mean)
head(DT)
DT$setf <- as.factor(DT$set)
DT$malef <- as.factor(DT$male)
DT$femalef <- as.factor(DT$female)
head(DT)
mix1 <- lm(yield~ set + femalef:malef:setf + malef:setf, data=DT)
MS <- anova(mix1)
MS
ms1 <- MS["malef:setf","Mean Sq"]
ms2 <- MS["femalef:malef:setf","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
Vf.m <- (ms2-mse)/2;Vf.m
unique(DT$rep)
Vf.m <- (ms2-mse)/2;Vf.m
Vfm <- (ms2-mse)/2;Vfm
mix2 <- mmer(yield~ set,
random=~femalef:malef:setf + malef:setf,
data=DT)
summary(mix2)$varcomp
ms1-ms2
unique(DT$female)
nrep=2
nfem=2
Vfm <- (ms2-mse)/2;Vfm
Vfm <- (ms2-mse)/nrep; Vfm
Vm <- (ms1-ms2)/(nrep*nfem); Vm
mix2 <- mmer(yield~ set,
random=~femalef:malef:setf + malef:setf,
data=DT)
summary(mix2)$varcomp
DT <- DT_expdesigns$car1
DT <- aggregate(yield~set+male+female+rep, data=DT, FUN = mean)
DT$setf <- as.factor(DT$set)
DT$malef <- as.factor(DT$male)
DT$femalef <- as.factor(DT$female)
head(DT)
## Expected Mean Square method
mix1 <- lm(yield~ set + femalef:malef:setf + malef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["malef:setf","Mean Sq"]
ms2 <- MS["femalef:malef:setf","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=2
nfem=2
Vfm <- (ms2-mse)/nrep; Vfm
Vm <- (ms1-ms2)/(nrep*nfem); Vm
levelplot(yield~set*male*female, data=DT)
levelplot(yield~male*female|set, data=DT)
levelplot(yield~malef*femalef|setf, data=DT)
levelplot(yield~malef*femalef|setf, data=DT, main="set")
levelplot(yield~male*female|set, data=DT, main="set")
levelplot(yield~male*female|set, data=DT, main="NC desing I")
head(DT)
summary(mix2)$varcomp
vc <- summary(mix2)$varcomp
Vfm <- vc[1,"VarComp"]
Vm <- vc[2,"VarComp"]
Va=4*Vm; Va
Vd=4*(Vfm-Vm);Vd
Vfm <- (ms2-mse)/nrep; Vfm
Vm <- (ms1-ms2)/(nrep*nfem); Vm
Va=4*Vm; Va
Vd=4*(Vfm-Vm);Vd
## Expected Mean Square method
mix1 <- lm(yield~ set + set:rep + femalef:malef:setf + malef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["malef:setf","Mean Sq"]
ms2 <- MS["femalef:malef:setf","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=2
nfem=2
Vfm <- (ms2-mse)/nrep; Vfm
Vm <- (ms1-ms2)/(nrep*nfem); Vm
Va=4*Vm; Va # assuming no inbreeding (4/(1+F))
Vd=4*(Vfm-Vm);Vd # assuming no inbreeding(4/(1+F)^2)
DT <- DT_expdesigns$car2
DT <- aggregate(yield~set+male+female+rep, data=DT, FUN = mean)
head(DT)
DT$setf <- as.factor(DT$set)
DT$repf <- as.factor(DT$rep)
DT$malef <- as.factor(DT$male)
DT$femalef <- as.factor(DT$female)
levelplot(yield~male*female|set, data=DT, main="NC desing I")
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + female:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["malef:setf","Mean Sq"]
ms2 <- MS["femalef:setf","Mean Sq"]
ms3 <- MS["femalef:malef:setf","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
ms1
MS <- anova(mix1); MS
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
ms1
ms2
ms3
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
ms2
ms3
unique(DT$rep)
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
nfem
nmal
Vfm <- (ms3-mse)/nrep; Vfm
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp
vc
Vfm
Vfm <- (ms3-mse)/nrep+1; Vfm
Vfm <- (ms3-mse)/(nrep+1); Vfm
head(DT)
levelplot(rep~male*female|set, data=DT, main="NC desing I")
Vf <- (ms2-ms3)/(nrep*nmal); Vf
vc <- summary(mix2)$varcomp; vc
Vf <- (ms2-ms3)/(nrep*5); Vf
nrep
Vf <- (ms2-ms3)/(3*nmal); Vf
unique(DT$rep)
nrep=length(unique(DT$rep))
nrep
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vf <- (ms2-ms3)/(nrep*5); Vf
with(DT,table(rep, female, male))
with(DT,table(female, male, set))
N=with(DT,table(female, male, set))
N[,,1]
N[1,,1]
which(N[1,,1] > 0)
length(which(N[1,,1] > 0))
N[,,1]
mean(N[,,1])
which(N[,,1]>0, arr.ind = TRUE)
N[which(N[,,1]>0, arr.ind = TRUE),,1]
N[which(N[,,1]>0, arr.ind = TRUE),1]
N[which(N[,,1]>0),,1]
which(N[,,1]>0)
which(N[,,1]>0)
N[which(N[,,1]>0),1]
N[which(N[,,1]>0),,1]
nrep=median(N[,,1])
nrep
nrep=table(median(N[,,1]))
nrep
nrep=table(N[,,1])
nrep
nrep=table(N[,,1])
nrep[which(names(nrep) !=0)]
names(nrep[which(names(nrep) !=0)])
nrep=as.numeric(names(nrep[which(names(nrep) !=0)]))
nrep
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=length(unique(DT$rep))
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vm <- (ms1-ms2)/(nrep*nfem); Vm
mix <- lm(y ~ x)
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp; vc
Vfm <- vc[1,"VarComp"]
Vm <- vc[2,"VarComp"]
Vf <- vc[3,"VarComp"]
Vfm
Vf
Vm
nrep
nmal
N
which(N[1,,1] > 0)
nmale
nmale=length(which(N[1,,1] > 0))
nfemale=length(which(N[,1,1] > 0))
nmale
nfemale
N=with(DT,table(female, male, set))
nmale=length(which(N[1,,1] > 0))
nfemale=length(which(N[,1,1] > 0))
nrep=table(N[,,1])
nrep=as.numeric(names(nrep[which(names(nrep) !=0)]))
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=length(unique(DT$rep))
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vm <- (ms1-ms2)/(nrep*nfem); Vm
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp; vc
nmale
nfemale
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmal); Vf
Vf <- (ms2-ms3)/(nrep*nmal); Vf*2
Vm <- (ms1-ms2)/(nrep*nfem); Vm
Vm <- (ms1-ms3)/(nrep*nfem); Vm
Vm <- (ms1-ms3)/(nrep*nfem); Vm*2
vc <- summary(mix2)$varcomp; vc
Vf <- (ms2-ms3)/(nrep*nmal); Vf
nmal
nrep
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmale); Vf
Vm <- (ms1-ms3)/(nrep*nfemale); Vm
vc <- summary(mix2)$varcomp; vc
Va=4*Vm; Va # assuming no inbreeding (4/(1+F))
Va=4*Vf; Va # assuming no inbreeding (4/(1+F))
Vd=4*(Vfm);Vd # assuming no inbreeding(4/(1+F)^2)
vc <- summary(mix2)$varcomp; vc
Vfm <- vc[1,"VarComp"]
Vm <- vc[2,"VarComp"]
Vf <- vc[3,"VarComp"]
Va=4*Vm; Va # assuming no inbreeding (4/(1+F))
Va=4*Vf; Va # assuming no inbreeding (4/(1+F))
Vd=4*(Vfm);Vd # assuming no inbreeding(4/(1+F)^2)
DT <- DT_expdesigns$car1
DT <- aggregate(yield~set+male+female+rep, data=DT, FUN = mean)
DT$setf <- as.factor(DT$set)
DT$repf <- as.factor(DT$rep)
DT$malef <- as.factor(DT$male)
DT$femalef <- as.factor(DT$female)
levelplot(yield~male*female|set, data=DT, main="NC desing I")
head(DT)
N=with(DT,table(female, male, set))
nmale=length(which(N[1,,1] > 0))
nfemale=length(which(N[,1,1] > 0))
nrep=table(N[,,1])
nrep=as.numeric(names(nrep[which(names(nrep) !=0)]))
## Expected Mean Square method
mix1 <- lm(yield~ setf + setf:repf +
femalef:malef:setf + malef:setf + femalef:setf, data=DT)
MS <- anova(mix1); MS
ms1 <- MS["setf:malef","Mean Sq"]
ms2 <- MS["setf:femalef","Mean Sq"]
ms3 <- MS["setf:femalef:malef","Mean Sq"]
mse <- MS["Residuals","Mean Sq"]
nrep=length(unique(DT$rep))
nfem=length(unique(DT$female))
nmal=length(unique(DT$male))
Vfm <- (ms3-mse)/nrep; Vfm
Vf <- (ms2-ms3)/(nrep*nmale); Vf
Vm <- (ms1-ms3)/(nrep*nfemale); Vm
## REML method
mix2 <- mmer(yield~ setf + setf:repf ,
random=~femalef:malef:setf + malef:setf + femalef:setf,
data=DT)
vc <- summary(mix2)$varcomp; vc
?DT_expdesigns
library(lme4);
library(lmerTest)
library(nlme)
library(glmmTMB)
install.packages("glmmTMB")
library(sommer)
library(glmmTMB)
dat <- agridat::john.alpha
# Fit models
mod.lme4 <- lme4::lmer(formula = yield ~ rep + (1|gen),  data = dat)
mod.glmmTMB <- glmmTMB::glmmTMB(formula = yield ~ rep + (1|gen),  data = dat, REML = TRUE) # default is ML!
mod.nlme <- nlme::lme(fixed = yield ~ rep, random = ~1|gen, data = dat)
mod.sommer <- sommer::mmer(fixed = yield ~ rep, random = ~ gen, data = dat)  #
AIC AIC(mod.lme4)
AIC(mod.lme4)
AIC(mod.glmmTMB)
AIC(mod.nlme)
mod.sommer$AIC
summary(mod.lme4)
summary(mod.glmmTMB) #101.8
summary(mod.lme4) #101.8
summary(mod.nlme) #101.8
summary(mod.lme4) #101.8
50.9*2
summary(mod.sommer)
AIC(mod.glmmTMB)
summary(mod.lme4) #101.8 (2ln(L))
mod.sommer$Beta
mod.sommer$monitor[1,]
mod.sommer$monitor[1,5]
mod.sommer$AIC
AIC(mod.nlme)
k=3
ll=-50.89
aic <- (2*k) - 2*ll;aic
k=5
ll=-50.89
aic <- (2*k) - 2*ll;aic
k=5 # (3 blues + 2 variance components) # number of parameters estimated
ll=-50.89 # log likelihood
aic <- (2*k) - 2*ll;aic
summary(mod.glmmTMB) #-50.9
AIC(mod.lme4)
AIC(mod.glmmTMB)
AIC(mod.nlme)
aic <- (2*k) - 2*ll;aic
summary(mod.nlme) #-50.89
k=5 # (3 blues + 2 variance components) # number of parameters estimated
ll=-16.85349# log likelihood
aic <- (2*k) - 2*ll;aic
mod.sommer$AIC
AIC
?AIC
k=3 # (3 blues + 2 variance components) # number of parameters estimated
summary(mod.sommer) # -16.85349
mod.sommer$U$gen$yield
length(mod.sommer$U$gen$yield)
k=3+24 # (3 blues + 2 variance components) # number of parameters estimated
ll=-50.899 # log likelihood
aic <- (2*k) - 2*ll;aic
summary(mod.nlme) #-50.899
k= 1# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.89981 # log likelihood
aic <- (2*k) - (2*ll);aic
AIC(mod.nlme)
k= 5# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.89981 # log likelihood
aic <- (2*k) - (2*ll);aic
AIC(mod.nlme)
k=3 # (3 blues + 2 variance components) # number of parameters estimated
ll=-16.85349# log likelihood
aic <- (2*k) - 2*ll;aic
mod.sommer$AIC
head(dat)
# Fit models
mod.lme4 <- lme4::lmer(formula = yield ~ rep + (1|gen) + (1|block),  data = dat)
mod.glmmTMB <- glmmTMB::glmmTMB(formula = yield ~ rep + (1|gen) + (1|block),  data = dat, REML = TRUE) # default is ML!
mod.nlme <- nlme::lme(fixed = yield ~ rep, random = ~1|gen + 1|block, data = dat)
mod.sommer <- sommer::mmer(fixed = yield ~ rep, random = ~ gen + block, data = dat)  #
AIC(mod.lme4)
AIC(mod.glmmTMB)
AIC(mod.nlme)
mod.sommer$AIC
AIC(mod.lme4)
k= 5# (3 blues + 2 variance components) # number of parameters estimated
summary(mod.lme4) #101.8 (2ln(L))
summary(mod.glmmTMB) #-50.9
k= 5# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.7 # log likelihood in the first 3 models
aic <- (2*k) - (2*ll);aic
AIC(mod.lme4)
summary(mod.lme4) #101.8 (2ln(L))
k= 6# (3 blues + 2 variance components) # number of parameters estimated
ll=-50.7 # log likelihood in the first 3 models
aic <- (2*k) - (2*ll);aic
AIC(mod.lme4)
library(lme4)
library(ggplot2)
library(asreml)
# assuming you have downloaded the project folder in your Desktop we set it as the working directory
setwd("~/Desktop/breeding-program-assessment/")
deltaTrueCor <- deltaEstCor <- numeric() # store true and estimated genetic gain for this iteration so we can plot
deltaEstimated <- deltaTrue <- list() # to store the increase in genetic gain for iterations
evolEstimated <- evolTrue <- list() # to store the increase in genetic gain for iterations
REP=1
print(paste("REP", REP))
########################
# define time-window and
# germplasm sample: "ELITE", "STAGE3", "STAGE2", "STAGE1"
########################
gto=1:20
sqrt(10.25)
(15*14)/2
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
render("special.topics.in.QG.Rmd", pdf_document())
