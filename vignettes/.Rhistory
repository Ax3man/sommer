mod.2 <-mmer(yield ~ env,
random = ~vs(ds(env),rep) + gen + gen:env,
rcov= ~vs(ds(env),units),
data=a)
cx <- predict.mmer(mod.2,classify = c("gen:env"))
cx$pvals
cx$hypertable
h <- cx$hypertable
?H.mat
A <- matrix(rep(0,200*1000),200,1000)
for (i in 1:200) {
A[i,] <- sample(c(-1,0,0,1), size=1000, replace=TRUE)
}
nrow(A)
v <- sample(1:nrow(A),100)
G <- A[v,v]
M <- matrix(rep(0,200*1000),200,1000)
for (i in 1:200) {
M[i,] <- sample(c(-1,0,0,1), size=1000, replace=TRUE)
}
v <- sample(1:nrow(M),100)
M2 <- M[v,]
A <- A.mat(M)
M2 <- M[v,]
G <- A.mat(M2)
H <- H.mat(A,G)
H[1:3,1:3]
dim(H)
dim(A)
A[1:2,1:2]
rownames(M) <- 1:nrow(M)
v <- sample(1:nrow(M),100)
A <- A.mat(M)
M2 <- M[v,]
G <- A.mat(M2)
H <- H.mat(A,G)
H[1:3,1:3]
G[1:3,1:3]
H[1:3,1:3]
?A.mat
colfunc <- colorRampPalette(c("steelblue4","springgreen","yellow"))
hv <- heatmap(H[1:15,1:15], col = colfunc(100),Colv = "Rowv")
library(AGHmatrix)
Hmat_Martini <- Hmatrix(A=A, G=G, method="Martini",
ploidy=2, missingValue=-9, maf=0.05)
M <- matrix(rep(0,2000*1000),2000,1000)
for (i in 1:2000) {
M[i,] <- sample(c(-1,0,0,1), size=1000, replace=TRUE)
}
rownames(M) <- 1:nrow(M)
v <- sample(1:nrow(M),100)
M2 <- M[v,]
A <- A.mat(M)
G <- A.mat(M2)
system.time(H <- H.mat(A,G))
Hmat_Martini <- Hmatrix(A=A, G=G, method="Martini",
ploidy=2, missingValue=-9, maf=0.05)
dim(A)
dim(G)
v <- sample(1:nrow(M),1000)
M2 <- M[v,]
A <- A.mat(M)
G <- A.mat(M2)
system.time(H <- H.mat(A,G))
Hmat_Martini <- Hmatrix(A=A, G=G, method="Martini",
ploidy=2, missingValue=-9, maf=0.05)
Hmatrix
library(sommer)
library(devtools);
install_github('OnofriAndreaPG/lmDiallel')
library(lmDiallel)
# Reproducing the results in Table 2 of M?hring and Piepho (2011)
rm(list = ls())
library(sommer)
library(lmDiallel)
data("hayman54")
df <- hayman54
head(df)
# Dummy variables for selfs, crosses, combinations
df$crosses <- ifelse(df$Par1 == df$Par2, 0, 1)
df$selfs <- ifelse(df$Par1 == df$Par2, 1, 0)
df$dr <- ifelse(as.character(df$Par1) < as.character(df$Par2), -1,
ifelse(as.character(df$Par1) == as.character(df$Par2), 0, 1))
df
head(df)
# Dummy variable for the combinations, ignoring the reciprocals
df$combination<-factor(ifelse(as.character(df$Par1) <= as.character(df$Par2),
paste(df$Par1, df$Par2, sep =""),
paste(df$Par2, df$Par1, sep ="")) )
df
# GRIFFING MODEL 2 with reciprocal effects ################################
mod1h <- mmer(Ftime ~ 1, data=df,
random = ~ Block
+ overlay(Par1, Par2)
+ combination
+ combination:dr)
summary(mod1h)$varcomp
head(df)
##                                    VarComp VarCompSE   Zratio
## Block.Ftime-Ftime                  0.00000   9.32181 0.000000
## overlay(Par1, Par2).Ftime-Ftime 1276.73089 750.17269 1.701916
## combination.Ftime-Ftime         1110.99090 330.16921 3.364914
## combination:dr.Ftime-Ftime        66.02295  49.26876 1.340057
## units.Ftime-Ftime                418.47949  74.56442 5.612321
##
# GE2 model, no reciprocal effects #######################################
mod1h <- mmer(Ftime ~ Block + crosses, data=df,
random = ~ overlay(Par1, Par2) #VEi GCA
+ overlay(Par1, Par2):crosses  #h.i GCA ignoring selfs
+ combination:crosses) # SCA ignoring selfs
summary(mod1h)$varcomp
?DT_halfdiallel
data(DT_halfdiallel)
DT <- DT_halfdiallel
head(DT)
DT
data(DT_fulldiallel)
DT <- DT_fulldiallel
head(DT)
# Dummy variables for selfs, crosses, combinations
# in a diallel:
# diagonal (selfs) are dr=0
# upper off diagonal (direct crosses) dr=-1
# lower off-diagonal (reciprocal crosses) dr=1
DT$crosses <- ifelse(DT$female == DT$male, 0, 1)
DT$selfs <- ifelse(DT$female == DT$male, 1, 0)
DT$dr <- ifelse(as.character(DT$female) < as.character(DT$male), -1,
ifelse(as.character(DT$female) == as.character(DT$male), 0, 1))
head(DT)
# Dummy variable for the cross combinations IDs ignoring the reciprocals
DT$combination<-factor(ifelse(as.character(DT$female) <= as.character(DT$male),
paste(DT$female, DT$male, sep =""),
paste(DT$male, DT$female, sep ="")) )
head(DT)
# GRIFFING MODEL 2 with reciprocal effects ################################
mod1h <- mmer(yield ~ 1, data=DT,
random = ~ 1
+ overlay(female, male) # GCA male & female overlayed
+ combination # SCA effects
+ combination:dr) # SCA reciprocal effects (if zero there's no reciprocal effects)
setwd("~/Desktop/sommer/data")
load("~/Desktop/sommer/data/DT_yatesoats.RData")
DT_mohring <- df
save(DT_mohring, file="DT_mohring.RData")
load("~/Desktop/sommer/data/DT_mohring.RData")
DT_mohring
library(lmDiallel)
data("hayman54")
df <- hayman54
head(df)
DT_mohring <- df
save(DT_mohring, file="DT_mohring.RData")
load("~/Desktop/sommer/data/DT_mohring.RData")
DT_mohring
data(DT_mohring)
DT <- DT_mohring
head(DT)
# Dummy variable for the cross combinations IDs ignoring the reciprocals
DT$combination<-factor(ifelse(as.character(DT$Par1) <= as.character(DT$Par2),
paste(DT$Par1, DT$Par2, sep =""),
paste(DT$Par2, DT$Par1, sep ="")) )
# GRIFFING MODEL 2 with reciprocal effects ################################
mod1h <- mmer(Ftime ~ 1, data=DT,
random = ~ Block
+ overlay(Par1, Par2) # GCA male & female overlayed
+ combination # SCA effects
+ combination:dr) # SCA reciprocal effects (if zero there's no reciprocal effects)
# Dummy variables for selfs, crosses, combinations
# in a diallel:
# diagonal (selfs) are dr=0
# upper off diagonal (direct crosses) dr=-1
# lower off-diagonal (reciprocal crosses) dr=1
DT$crosses <- ifelse(DT$Par1 == DT$Par2, 0, 1)
DT$selfs <- ifelse(DT$Par1 == DT$Par2, 1, 0)
DT$dr <- ifelse(as.character(DT$Par1) < as.character(DT$Par2), -1,
ifelse(as.character(DT$Par1) == as.character(DT$Par2), 0, 1))
# Dummy variable for the cross combinations IDs ignoring the reciprocals
DT$combination<-factor(ifelse(as.character(DT$Par1) <= as.character(DT$Par2),
paste(DT$Par1, DT$Par2, sep =""),
paste(DT$Par2, DT$Par1, sep ="")) )
# GRIFFING MODEL 2 with reciprocal effects ################################
mod1h <- mmer(Ftime ~ 1, data=DT,
random = ~ Block
+ overlay(Par1, Par2) # GCA male & female overlayed
+ combination # SCA effects
+ combination:dr) # SCA reciprocal effects (if zero there's no reciprocal effects)
summary(mod1h)$varcomp
##                                    VarComp VarCompSE   Zratio
## Block.Ftime-Ftime                  0.00000   9.32181 0.000000
## overlay(Par1, Par2).Ftime-Ftime 1276.73089 750.17269 1.701916
## combination.Ftime-Ftime         1110.99090 330.16921 3.364914
## combination:dr.Ftime-Ftime        66.02295  49.26876 1.340057
## units.Ftime-Ftime                418.47949  74.56442 5.612321
##
# GE2 model, no reciprocal effects #######################################
mod1h <- mmer(Ftime ~ Block + crosses, data=DT,
random = ~ overlay(Par1, Par2) #VEi GCA (all)
+ overlay(Par1, Par2):crosses  #h.i GCA ignoring selfs (only hybrids)
+ combination:crosses) # SCA ignoring selfs
summary(mod1h)$varcomp
# GE3, no reciprocal effects ############################################
mod1h <- mmer(Ftime ~ Block + crosses, data=DT,
random = ~ overlay(Par1, Par2):crosses # GCAC (only for hybrids)
+ Par1:selfs # SP (GCA males only for inbreds)
+ combination:crosses) # SCA ignoring selfs
summary(mod1h)$varcomp
# GE3 with reciprocal effects ###########################################
# In Mohring: mixed model 3 reduced
mod1h <- mmer(Ftime ~ Block + crosses, data=DT,
random = ~ overlay(Par1, Par2):crosses #GCAC (for hybrids only)
+ Par1:selfs # SP
+ combination:crosses # SCA (hybrids only)
+ combination:dr) # REC (reciprocal effects) (if zero there's no reciprocal effects)
summary(mod1h)$varcomp
# GE3 with RGCA + RSCA ##################################################
# In Mohring: mixed model 3
mod1h <- mmer(Ftime ~ Block + crosses, data=DT,
random = ~ overlay(Par1, Par2):crosses #GCAC (hybrids only)
+ Par1:selfs # SP
+ combination:crosses # SCA
+ overlay(Par1,Par2):dr # RGCA: exclude selfs (if zero there's no reciprocal effects)
+ combination:dr) #RSCA: exclude selfs (if zero there's no reciprocal effects)
summary(mod1h)$varcomp
##                                            VarComp  VarCompSE    Zratio
##                                            VarComp  VarCompSE    Zratio
## overlay(Par1, Par2):crosses.Ftime-Ftime   927.7843  537.88164 1.7248857
##                                            VarComp  VarCompSE    Zratio
## overlay(Par1, Par2):crosses.Ftime-Ftime   927.7843  537.88164 1.7248857
## Par1:selfs.Ftime-Ftime                  10001.7570 5456.30125 1.8330654
library(lme4)
dt <- sleepstudy
dt$Subjectf <- as.factor(dt$Subject)
dt$Daysf <- as.factor(dt$Days)
head(dt)
DT_sleepstudy <- dt
setwd("~/Desktop/sommer/data")
save(DT_sleepstudy, file="DT_sleepstudy.RData")
?sleepstudy
?save
setwd("~/Desktop/sommer/data")
load("~/Desktop/sommer/data/DT_mohring.RData")
save(DT_mohring, file="DT_mohring.RData")
load("~/Desktop/sommer/data/DT_sleepstudy.RData")
save(DT_sleepstudy, file="DT_sleepstudy.RData")
save(DT_mohring, file="DT_mohring.RData", version=2)
save(DT_sleepstudy, file="DT_sleepstudy.RData", version=2)
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("v1.sommer.quick.start.Rmd", pdf_document())
render("v5.sommer.vs.lme4.Rmd", pdf_document())
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
library(sommer)
?GWAS
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
install.packages("RcppProgress")
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
Rcpp::sourceCpp('~/Desktop/sommer/src/MNR.cpp')
source('~/Desktop/sommer/R/GWAS.R')
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
?crayon
source('~/Desktop/sommer/R/GWAS.R')
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT, verbose=F,
M=GT, gTerm = "u:id")
source('~/Desktop/sommer/R/GWAS.R')
#######
## when adding new C++ function make sure you run
Rcpp::compileAttributes("/Users/giovannycovarrubias/Desktop/sommer")
library(boot)
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
library(sommer)
?GWAS
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
#######
## when adding new C++ function make sure you run
Rcpp::compileAttributes("/Users/giovannycovarrubias/Desktop/sommer")
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
library(sommer)
library(sommer)
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
summary(mix1)
ms <- as.data.frame(mix2$scores)
ms <- as.data.frame(mix1$scores)
ms$Locus <- rownames(ms)
MP2 <- merge(MP,ms,by="Locus",all.x = TRUE);
manhattan(MP2, pch=20,cex=.5, PVCN = "color")
manhattan(MP2, pch=20,cex=1.5, PVCN = "color")
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
library(sommer)
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
summary(mix1)
ms <- as.data.frame(mix1$scores)
ms$Locus <- rownames(ms)
MP2 <- merge(MP,ms,by="Locus",all.x = TRUE);
manhattan(MP2, pch=20,cex=1.5, PVCN = "color")
?GWAS
?MMER
?mmer
vignette("v5.sommer.vs.lme4")
?mmer
vignette("v5.sommer.vs.lme4")
vignette("v4.sommer.gxe")
?vignette
vignette(all = TRUE)
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
render("v4.sommer.gxe.Rmd", pdf_document())
render("v5.sommer.vs.lme4.Rmd", pdf_document())
render("v5.sommer.vs.lme4.Rmd", pdf_document())
install.packages("lme4")
render("v5.sommer.vs.lme4.Rmd", pdf_document())
render("v5.sommer.vs.lme4.Rmd", pdf_document())
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
render("v5.sommer.vs.lme4.Rmd", pdf_document())
?install.packages
library(sommer)
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
data(DT_cpdata)
source('~/Desktop/sommer/R/FUN_markers.R')
####=========================================####
#### For CRAN time limitations most lines in the
#### examples are silenced with one '#' mark,
#### remove them and run the examples using
#### command + shift + C |OR| control + shift + C
####=========================================####
data(DT_cpdata)
#### get the marker matrix
CPgeno <- GT_cpdata; CPgeno[1:5,1:5]
#### get the map
mapCP <- MP_cpdata; head(mapCP)
names(mapCP) <- c("Locus","Position","LG")
#### with example purposes we only do 3 chromosomes
mapCP <- mapCP[which(mapCP$LG <= 3),]
#### run the function
res <- LD.decay(CPgeno, mapCP)
names(res)
#### subset only markers with significant LD
res$all.LG <- res$all.LG[which(res$all.LG$p < .001),]
#### plot the LD decay
with(res$all.LG, plot(r2~d,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,yaxt="n",
xaxt="n",ylab=expression(r^2),
xlab="Distance in cM")
)
axis(1, at=seq(0,55,5), labels=seq(0,55,5))
axis(2,at=seq(0,1,.1), labels=seq(0,1,.1), las=1)
#### if you want to add the loess regression lines
#### this could take a long time!!!
mod <- loess(r2 ~ d, data=res$all.LG)
par(new=T)
lilo <- predict(mod,data.frame(d=1:55))
plot(lilo, bty="n", xaxt="n", yaxt="n", col="green",
type="l", ylim=c(0,1),ylab="",xlab="",lwd=2)
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
library(sommer)
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT)
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id")
####=========================================####
#### For CRAN time limitations most lines in the
#### examples are silenced with one '#' mark,
#### remove them and run the examples using
#### command + shift + C |OR| control + shift + C
####=========================================####
data(DT_cpdata)
#### get the marker matrix
CPgeno <- GT_cpdata; CPgeno[1:5,1:5]
#### get the map
mapCP <- MP_cpdata; head(mapCP)
names(mapCP) <- c("Locus","Position","LG")
#### with example purposes we only do 3 chromosomes
mapCP <- mapCP[which(mapCP$LG <= 3),]
#### run the function
res <- LD.decay(CPgeno, mapCP)
names(res)
#### subset only markers with significant LD
res$all.LG <- res$all.LG[which(res$all.LG$p < .001),]
install.packages("~/Desktop/sommer_4.1.2.tar.gz", repos = NULL, type = "source")
library(sommer)
vignette('v1.sommer.quick.start')
vignette('v5.sommer.vs.lme4')
?LD.decay
?mmer
data(DT_example)
DT <- DT_example
head(DT)
####=========================================####
#### Univariate homogeneous variance models  ####
####=========================================####
## Compound simmetry (CS) model
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
data=DT)
summary(ans1)
summary(ans1)$varcomp
vignette("v1.sommer.quick.start")
