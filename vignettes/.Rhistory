plot(mix1$U$`u:GT`$color)
plot(log(abs(mix1$U$`u:GT`$color)))
summary(mix1)
.04/.1
pt(.4)
pt(.4,1)
summary.mmer
s2.beta <- diag(as.matrix(mix1$PevU$`u:GT`[[1]]))
str(mix1$PevU$`u:GT`)
mix1 <- mmer(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf + vs(GT),
rcov=~units, getPEV = T,
data=DT)
s2.beta <- diag(as.matrix(mix1$PevU$`u:GT`$color))
coef$Std.Error <- sqrt(abs(s2.beta))
s2.beta
abs(s2.beta)
sqrt(abs(s2.beta))
Std.Error <- sqrt(abs(s2.beta))
t.value <- mix1$U$`u:GT`$color/Std.Error
plot(t.value)
plot(-log(t.value,10))
plot(-log(t.value))
plot(-log(abs(t.value)))
sqrt(.8)
sqrt(..56)
sqrt(.56)
## if units ARE NOT standardized
x <- rnorm(10000, 10, 4)
var(x)
plot(density(x))
# point of truncation
pt <- sort(x, decreasing = T)[.2*length(x)];pt
# mean of chosen group (are sorted)
mcg <- mean(sort(x, decreasing = T)[1:(.2*length(x))]);mcg
# selection instensity
mcg/sd(x) - (mean(x)/sd(x))
## if units ARE standardized
x <- rnorm(10000, 0, 1)
var(x)
plot(density(x))
# point of truncation
pt <- sort(x, decreasing = T)[.2*length(x)];pt
# mean of chosen group (are sorted)
mcg <- mean(sort(x, decreasing = T)[1:(.2*length(x))]);mcg
# selection instensity
mcg - mean(x)
# R = h2*S
h2=0.5
S = mcg - mean(x) #mean(selected) - mean(pop)
S*h2
S = mcg - mean(x);S #mean(selected) - mean(pop)
S*h2
R=S*h2;R
100
80/100
80/102
## if units ARE NOT standardized
x <- rnorm(10000, 10, 4)
var(x)
plot(density(x))
# point of truncation
pt <- sort(x, decreasing = T)[.2*length(x)];pt
# mean of chosen group (are sorted)
mcg <- mean(sort(x, decreasing = T)[1:(.2*length(x))]);mcg
# selection instensity
mcg/sd(x) - (mean(x)/sd(x))
(mcg - (mean(x))/sd(x)
(mcg - mean(x))/sd(x)
# or easier
p=0.2 #proportion
dnorm(qnorm(1-p))/p
# or easier
p=0.2 #proportion
dnorm(qnorm(1-p))/p
?dnorm
qnorm(1-p)
y <- 1:10
p1 <- 1:10 + rnorm(10,0,.2)
p2 <- 1:10 + rnorm(10,0,.2)
p <- p1+p2
p <- (p1+p2)/2
mod <- lm(y~p)
mod
mod$coefficients
## if units ARE NOT standardized
x <- rnorm(10000, 10, 4)
var(x)
plot(density(x))
# point of truncation
pt <- sort(x, decreasing = T)[.2*length(x)];pt
# mean of chosen group (are sorted)
mcg <- mean(sort(x, decreasing = T)[1:(.2*length(x))]);mcg
# selection instensity
mcg - mean(x)
# selection instensity
S = mcg - mean(x);S
# selection differential
S <- mcg - mean(x); S # or
# selection instensity
S/sd(x) # S/sd(x) # mcg/sd(x) - (mean(x)/sd(x)) # or
z <- c(45,40,35,33,32)
n <- c(1,2,3,5,5)
n/mean(n)
z * (n/mean(n))
mean(z * (n/mean(n)) )
mean.pop <- mean(z);mean.pop
mean.ofspring <- mean(z * (n/mean(n)) );mean.ofspring
mean.ofspring - mean.pop
mean.pop <- mean(z);mean.pop
mean.ofspring <- mean(z * (n/mean(n)) );mean.ofspring
S = mean.ofspring - mean.pop
S/sd(x)
mean.pop <- mean(z);mean.pop
mean.ofspring1 <- mean(z);mean.pop
mean.ofspring2 <- mean(z * (n/mean(n)) );mean.ofspring
S = mean.ofspring - 30;S
S/sd(x)
h2=0.3
S*0.3
S1 = mean.ofspring1 - 30;S1
S2 = mean.ofspring2 - 30;S2
h2=0.3
R=S1*0.3;R
R=S2*0.3;R
i=1.4
sda=4
h2=0.4
R(i,sda,h2,1:10)
R <- function(i,sd.a,h2,n){
i * sd.a * sqrt(h2*n / 4+h2(n-1))
}
i=1.4
sda=4
h2=0.4
R(i,sda,h2,1:10)
R <- function(i,sd.a,h2,n){
i * sd.a * sqrt(h2*n / 4+h2*(n-1))
}
i=1.4
sda=4
h2=0.4
R(i,sda,h2,1:10)
?vs
library(sommer)
?vs
R(i,sda,h2,1:10)
r <- function(h2,n){
sqrt(h2*n / 4+h2*(n-1))
}
i=1.4
sda=4
h2=0.4
R(i,sda,h2,1:10)
R(h2,1:10)
h2=0.4
r <- function(h2,n){
sqrt(h2*n / 4+h2*(n-1))
}
i=1.4
sda=4
h2=0.4
R(i,sda,h2,1:10)
R(h2,1:10)
h2
r(h2,1:10)
r <- function(h2,n){
a <- 4+h2*(n-1)
return(sqrt(n/(n+a)))
}
i=1.4
sda=4
h2=0.4
R(i,sda,h2,1:10)
r(h2,1:10)
plot(r(h2,1:10))
plot(r(h2,1:20))
plot(r(h2,1:50))
plot(r(h2,1:500))
plot(r(h2,1:30))
h2s <- seq(.1,1,.1)
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
h2s <- seq(.1,1,.1)
n=50
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
}
?lines
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l")
}else{lines(mat0[,i])}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0))
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i)
}else{lines(mat0[,i], col=i)}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1, bty="n")
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1,
bty="n", cex=.7)
h2s <- seq(.1,1,.1)
n=50
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i)
}else{lines(mat0[,i], col=i, lty=i)}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1,
bty="n", cex=.6)
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s <- seq(.1,1,.1)
n=50
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i)
}else{lines(mat0[,i], col=i, lty=i)}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s
n=50
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
r(h2s[i],1:n)
(4 - h2)/(1-h2)
h2s <- seq(.1,1,.1)
n=20
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- r(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
(4 - h2)/(1-h2)
R(i,sda,h2,1:10)
i*sda*sqrt(h2)
i
h2
sda
i*sda*sqrt(h2)
i*sda*sqrt(h2s)
R(i,sda,h2,1:10)
i*sda*sqrt(h2s)
R(i,sda,h2,1:10)
i*sda*sqrt(h2)
R(i,sda,h2,1:10)
i*sda*sqrt(h2) # regular response to selection using perse
i=1.4
sda=4
h2=0.1
R(i,sda,h2,1:10) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R <- function(i,sd.a,h2,n){
a <- 4+h2*(n-1)
# i * sd.a * sqrt((h2*n) / 4+h2*(n-1))
i * sd.a * sqrt(n/(n+a))
}
return(R0)
R <- function(i,sd.a,h2,n){
a <- 4+h2*(n-1)
# i * sd.a * sqrt((h2*n) / 4+h2*(n-1))
R0 <- i * sd.a * sqrt(n/(n+a))
return(R0)
}
i=1.4
sda=4
h2=0.1
R(i,sda,h2,1:10) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
i=1.4
sda=4
h2=0.1
R(i,sda,h2,1:10) # response to selection using progeny testing
R(i,sda,h2,1:10) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R(i,sda,h2,1) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R <- function(i,sd.a,h2,n){
a <- (4-h2)/h2
# i * sd.a * sqrt((h2*n) / 4+h2*(n-1))
R0 <- i * sd.a * sqrt(n/(n+a))
return(R0)
}
i=1.4
sda=4
h2=0.1
R(i,sda,h2,1) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R(i,sda,h2,1:2) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R(i,sda,h2,1:4) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R(i,sda,h2,1:10) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
R <- function(i,sd.a,h2,n){ # response to selction using progeny testing
a <- (4-h2)/h2
cor.pt.perse <- sqrt(n/(n+a))
R0 <- i * sd.a * cor.pt.perse
return(R0)
}
i=1.4
sda=4
h2=0.1
R(i,sda,h2,1:10) # response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
# progeny testing gives lager response to selection when
(4 - h2)/(1-h2)
h2s <- seq(.1,1,.1)
n=20
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
cor.pt.perse <- function(h2,n){
a <- (4-h2)/h2
sqrt(n/(n+a))
}
i*sda*cor.pt.perse(h2,1:10)
i*sda*cor.pt.perse(h2,1:10)# response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
h2s <- seq(.1,1,.1)
n=20
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s <- seq(.1,1,.1)
n=20
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2)/(1-h2), col=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s <- seq(.1,1,.1)
n=20
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2s[i])/(1-h2s[i]), col=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s <- seq(.1,1,.1)
n=30
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2s[i])/(1-h2s[i]), col=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s <- seq(.1,1,.1)
n=40
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2s[i])/(1-h2s[i]), col=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2s <- seq(.1,1,.1)
n=40
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1))
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2s[i])/(1-h2s[i]), col=i, lty=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
h2=0.5
r <- sqrt(h2);r
h2=0.25
r <- sqrt(h2);r
Lp=1.5
Lpt=2.5
(r/Lp)/(cor.pt.perse(h2,15)/Lpt)
h2=0.25
r <- sqrt(h2);r
Lp=3
Lpt=4
i=1 # to be ignored
(r/Lp)/(cor.pt.perse(h2,15)/Lpt)
(r/Lp)/(cor.pt.perse(h2,2)/Lpt)
(r/Lp)/(cor.pt.perse(h2,12)/Lpt)
(r/Lp)/(cor.pt.perse(h2,120)/Lpt)
(r/Lp)/(cor.pt.perse(h2,2)/Lpt)
(r/Lp)/(cor.pt.perse(h2,2)/Lpt) #
(r/Lp)/(cor.pt.perse(h2,120)/Lpt) # with a big number of progeny
h2s <- seq(.1,1,.1)
n=40
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1), ylab="correlation", xlab="number of progeny", main="correlation between progeny test and perse at different h2s" )
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2s[i])/(1-h2s[i]), col=i, lty=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6)
?legend
h2s <- seq(.1,1,.1)
n=40
mat0 <- matrix(NA, nrow=n, ncol=length(h2s))
for(i in 1:length(h2s)){
mat0[,i] <- cor.pt.perse(h2s[i],1:n)
if(i == 1){
plot(mat0[,i], type="l", col=i, lty=i, ylim=c(0,1), ylab="correlation", xlab="number of progeny", main="correlation between progeny test and perse at different h2s" )
}else{lines(mat0[,i], col=i, lty=i)}
abline(v=(4 - h2s[i])/(1-h2s[i]), col=i, lty=i)
}
legend("bottomright", legend = h2s, col=1:ncol(mat0), lty=1:length(h2s),
bty="n", cex=.6, title="h2s")
i*sda*cor.pt.perse(h2,1:10)# response to selection using progeny testing
i*sda*sqrt(h2) # regular response to selection using perse
200/20
(r/Lp)/(cor.pt.perse(h2,12)/Lpt) # with n=12 progeny perse and progeny testing are the same even if time is longer
800000/4250
10*50
100*50
library(cranlogs)
#cran_top_downloads(when='last-year')
library(ggplot2)
data <- cran_downloads(packages=c("sommer","rrBLUP", "BGLR","EMMREML","SpATS"), from="2019-02-01",to="last-day")
#data <- cran_downloads(packages=c("sommer","rrBLUP"), when="last-month")
qplot(date, count, data=data, geom="line", colour=package,
ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
data <- cran_downloads(packages=c("sommer","rrBLUP"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
data <- cran_downloads(packages=c("sommer", "BGLR"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
data <- cran_downloads(packages=c("sommer","EMMREML"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
data <- cran_downloads(packages=c("sommer","SpATS"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
data <- cran_downloads(packages=c("sommer","lme4"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year")
data <- cran_downloads(packages=c("sommer","nlme"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year")
data <- cran_downloads(packages=c("Fragman","sommer", "GiNA"), when="last-month")
qplot(date, count, data=data, geom="line", colour=package,
ylab="Downloads", main="Package downloads in past year")
sum(data$count[which(data$package == "Fragman")])
sum(data$count[which(data$package == "sommer")])
sum(data$count[which(data$package == "sommer")])
sum(data$count[which(data$package == "rrBLUP")])
data <- cran_downloads(packages=c("sommer","rrBLUP"), from="2019-01-01",to="last-day")
qplot(date, count, data=data, geom="line", colour=package,ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
240/70
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("sommer.Rmd", pdf_document())
render("sommer.start.Rmd", pdf_document())
render("sommer.changes.Rmd", pdf_document())
render("sommer.FAQ.Rmd", pdf_document())
library(cranlogs)
#cran_top_downloads(when='last-year')
library(ggplot2)
data <- cran_downloads(packages=c("sommer","rrBLUP", "BGLR","EMMREML","SpATS"), from="2019-02-01",to="last-day")
#data <- cran_downloads(packages=c("sommer","rrBLUP"), when="last-month")
qplot(date, count, data=data, geom="line", colour=package,
ylab="Downloads", main="Package downloads in past year") + ylim(0,200)
data <- cran_downloads(packages=c("sommer","rrBLUP"), from="2019-01-01",to="last-day")
