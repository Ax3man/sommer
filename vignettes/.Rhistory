yo <- y
Ai <- lapply(A, function(x){solve(x)})
S=ans3$R; S <- lapply(S, as.matrix)
niters=80
tolpar=1e-3
tolparinv=1e-6
v <- unlist(ans1$sigma)
theta <- list(matrix(c(v[1],0,0,v[3]),2,2), diag(c(v[4],v[5]))); theta
thetaC <- list(matrix(c(1,0,0,1),2,2), diag(2));thetaC
bem0 <- diag(4)#do.call(adiag1, thetaC); bem0[which(bem0 < 2)]=.01; bem0[which(bem0 == 2)]=1;bem0
bem1 <- diag(.0,4); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
theta <- list(matrix(c(15,7.5,7.5,15),2,2), diag(c(25,25))); theta
thetaC <- list(matrix(c(1,0,2,1),2,2), diag(2));thetaC
bem0 <- diag(5)#do.call(adiag1, thetaC); bem0[which(bem0 < 2)]=.01; bem0[which(bem0 == 2)]=1;bem0
bem1 <- diag(0,5); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
stepEM=3
stepAI=1
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
res3$sigmavector
Z <- list(list(ans3$Z[[1]],ans3$Z[[3]]))
A <- list(diag(ncol(Z[[1]][[1]])))
X <- do.call(cbind,ans3$X)
y <- DT$Yield #ans3$yvar#(as.matrix(DT[,"Yield"])); colnames(y) <- "y"
yo <- y
Ai <- lapply(A, function(x){solve(x)})
S=ans3$R; S <- lapply(S, as.matrix)
niters=80
tolpar=1e-3
tolparinv=1e-6
v <- unlist(ans1$sigma)
theta <- list(matrix(c(v[1],0,0,v[3]),2,2), diag(c(v[4],v[5]))); theta
thetaC <- list(matrix(c(1,0,0,1),2,2), diag(2));thetaC
bem0 <- diag(4)#do.call(adiag1, thetaC); bem0[which(bem0 < 2)]=.01; bem0[which(bem0 == 2)]=1;bem0
bem1 <- diag(.0,4); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
stepEM=3
stepAI=1
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
data(DT_example)
DT <- DT_example
DT <- droplevels(DT[which(DT$Env %in% c("CA.2011","CA.2012")),])#_example
A <- A_example
head(DT)
DT$Yield2 <- scale(DT$Yield)
ans1 <- mmer(Yield~Env,
random= ~vs(us(Env),Name), reshape.output = T,
rcov= ~ vs(ds(Env),units), iters=19,
data=DT)
ans2 <- mmer(Yield~Env,
random= ~vs(ds(Env),Name), reshape.output = T,
rcov= ~ vs(ds(Env),units), iters=19,
data=DT)
Z <- list(list(ans3$Z[[1]],ans3$Z[[3]]))
ans3 <- mmer(Yield~Env,
random= ~vs(us(Env),Name), return.param = T,
rcov= ~ vs(ds(Env),units), iters=19,
data=DT)
Z <- list(list(ans3$Z[[1]],ans3$Z[[3]]))
A <- list(diag(ncol(Z[[1]][[1]])))
X <- do.call(cbind,ans3$X)
y <- DT$Yield #ans3$yvar#(as.matrix(DT[,"Yield"])); colnames(y) <- "y"
yo <- y
Ai <- lapply(A, function(x){solve(x)})
S=ans3$R; S <- lapply(S, as.matrix)
niters=80
tolpar=1e-3
tolparinv=1e-6
v <- unlist(ans1$sigma)
theta <- list(matrix(c(v[1],0,0,v[3]),2,2), diag(c(v[4],v[5]))); theta
thetaC <- list(matrix(c(1,0,0,1),2,2), diag(2));thetaC
bem0 <- diag(4)#do.call(adiag1, thetaC); bem0[which(bem0 < 2)]=.01; bem0[which(bem0 == 2)]=1;bem0
bem1 <- diag(.0,4); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
stepEM=3
stepAI=1
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
res3$sigmavector
source('~/Desktop/sommer Extra/AI_mme4.R')
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
stepEM=0
stepAI=3
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
res3$taper
bem1 <- diag(0.01,5); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
stepEM=0
stepAI=3
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
res3$taper
bem1 <- diag(.01,4); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
stepEM=0
stepAI=3
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
res3$taper
source('~/Desktop/sommer Extra/AI_mme4.R')
v <- unlist(ans1$sigma)
theta <- list(matrix(c(v[1],0,0,v[3]),2,2), diag(c(v[4],v[5]))); theta
thetaC <- list(matrix(c(1,0,0,1),2,2), diag(2));thetaC
bem0 <- diag(4)#do.call(adiag1, thetaC); bem0[which(bem0 < 2)]=.01; bem0[which(bem0 == 2)]=1;bem0
bem1 <- diag(.01,4); #bem1[2,2]=1;# bem1[,2]=1#do.call(adiag1, thetaC); bem1 <- (bem1*0)+1; bem1
stepEM=0
stepAI=3
bem <- c(rep(list(bem0),stepEM), rep(list(bem1),stepAI))#,rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step),rep(list(bem0),stepEM), rep(list(stepAI),step))#,rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step),rep(list(bem0),step), rep(list(bem1),step))
bem <- rep(bem,30)
bem <- lapply(rapply(bem, enquote, how="unlist"), eval)
# bem <- rep(.01,180); bem[1:4]=1; bem[5:7] = c(.75,.5,.25);bem
tt=system.time(
expr = res3<-AI_mme4(X,Z,Ai,y,S=S, niters=20, tolpar=1e-6,tolparinv=1e-6,
bEM = bem,#useEM = F, #jenrichIters=10,
# init=c(.1,.01,.1,.01,.01,.1,.1)
theta=theta,thetaC=thetaC
)
)
load("~/Desktop/sommer/data/DT_ige.RData")
X <- kronecker(rep(1,n),diag(1,2))
V1 <- matrix(c(1,0,0,0),2,2)
V2 <- matrix(c(0,0,0,1),2,2)
V3 <- matrix(c(0,1,1,0),2,2)
sig1 <- kronecker(diag(1,n),V1) # variance component 1
library("MASS")  ## needed for mvrnorm
n <- 100
mu <- c(1,2)
Sigma <- matrix(c(10,5,5,10),2,2)
Y <- mvrnorm(n,mu,Sigma); colnames(Y) <- c("y1","y2")
## this simulates multivariate normal rvs
y <- as.vector(t(Y))
df1 <- data.frame(Y)
df2 <- data.frame(y)
mix1 <- mmer(cbind(y1,y2)~1, rcov=~vs(units, Gtc=unsm(2)), data=df1, verbose = FALSE)
mix1$sigma
X <- kronecker(rep(1,n),diag(1,2))
V1 <- matrix(c(1,0,0,0),2,2)
V2 <- matrix(c(0,0,0,1),2,2)
V3 <- matrix(c(0,1,1,0),2,2)
sig1 <- kronecker(diag(1,n),V1) # variance component 1
sig2 <- kronecker(diag(1,n),V2) # variance component 2
gam <- kronecker(diag(1,n),V3) # covariance component
# now fit the model
mix2 <- mmer(y~X-1, rcov = ~vs(sig1)+vs(sig2)+vs(gam), data=df2, verbose = FALSE)
summary(mix2)$varcomp
mix1$sigma
mix2$sigma
mix2$sigmaVector
library("MASS")  ## needed for mvrnorm
n <- 100
mu <- c(1,2)
Sigma <- matrix(c(10,5,5,10),2,2)
Y <- mvrnorm(n,mu,Sigma); colnames(Y) <- c("y1","y2")
## this simulates multivariate normal rvs
y <- as.vector(t(Y))
df1 <- data.frame(Y)
df2 <- data.frame(y)
mix1 <- mmer(cbind(y1,y2)~1, rcov=~vs(units, Gtc=unsm(2)), data=df1, verbose = FALSE)
mix1$sigma
But now assume that you would like to constraint the variance of y1 and y2 to be equal. This requires the user to take a different approach. The user can build externally the multitrait matrices and fit them directly. Let's do this to recreate the exact same result than using the bil-in capabilities:
```{r}
X <- kronecker(rep(1,n),diag(1,2))
V1 <- matrix(c(1,0,0,0),2,2)
V2 <- matrix(c(0,0,0,1),2,2)
V3 <- matrix(c(0,1,1,0),2,2)
sig1 <- kronecker(diag(1,n),V1) # variance component 1
sig2 <- kronecker(diag(1,n),V2) # variance component 2
gam <- kronecker(diag(1,n),V3) # covariance component
# now fit the model
mix2 <- mmer(y~X-1, rcov = ~vs(sig1)+vs(sig2)+vs(gam), data=df2, verbose = FALSE)
mix2$sigmaVector
```
Notice that we fitted a univariate model but we built the kernels and fitted those kernels one by one.
Now we will constraint the two variance components to be equal. This is done the following way:
```{r}
sig <- sig1+sig2
mix3 <- mmer(y~X-1, rcov = ~vs(sig)+vs(gam), data=df2, iters=30, verbose = FALSE)
mix3$sigmaVector
X <- kronecker(rep(1,n),diag(1,2))
V1 <- matrix(c(1,0,0,0),2,2)
V2 <- matrix(c(0,0,0,1),2,2)
V3 <- matrix(c(0,1,1,0),2,2)
sig1 <- kronecker(diag(1,n),V1) # variance component 1
sig2 <- kronecker(diag(1,n),V2) # variance component 2
gam <- kronecker(diag(1,n),V3) # covariance component
# now fit the model
mix2 <- mmer(y~X-1, rcov = ~vs(sig1)+vs(sig2)+vs(gam), data=df2, verbose = FALSE)
mix2$sigmaVector
sig <- sig1+sig2
mix3 <- mmer(y~X-1, rcov = ~vs(sig)+vs(gam), data=df2, iters=30, verbose = FALSE)
mix3$sigmaVector
install.packages("sommer")
library(sommer)
?mmer
data(DT_example)
DT <- DT_example
head(DT)
## Compound simmetry (CS) model
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units,
data=DT)
summary(ans1)$varcomp
ans1$Beta
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),Name),
rcov=~vs(us(Env),units),
data=DT)
summary(ans3)
ans3 <- mmer(Yield~Env,
random=~ vs(us(Env),Name),
rcov=~vs(units),
data=DT)
summary(ans3)
data(DT_mohring)
DT <- DT_mohring
head(DT)
DT2 <- add.diallel.vars(DT,par1="Par1", par2="Par2")
head(DT2)
# GRIFFING MODEL 2 with reciprocal effects ###########################
mod1h <- mmer(Ftime ~ 1, data=DT2,
random = ~ Block
# GCA male & female overlayed
+ overlay(Par1, Par2)
# SCA effects (includes cross and selfs)
+ cross.id
# SCAR reciprocal effects (if zero there's no reciprocal effects)
+ cross.id:cross.type)
summary(mod1h)$varcomp
mod1h <- mmer(Ftime ~ Block + is.cross, data=DT2,
random = ~
# GCA for all (female and male)
overlay(Par1, Par2)
# GCA (only for hybrids)
+ overlay(Par1, Par2):is.cross
# SCA (hybrids only)
+ cross.id:is.cross)
summary(mod1h)$varcomp
?sommer
rrBLUP::mixed.solve
install.packages("~/Desktop/sommer_4.1.4.tar.gz", repos = NULL, type = "source")
library(sommer)
data(DT_example)
DT <- DT_example
A <- A_example
head(DT)
## Compound simmetry (CS) model
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units, #return.param = T,
data=DT)
summary(ans1)
nm=100000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df, reshape.output = F)
plot(mix$U$`u:M`$y)
summary(mix)$varcomp
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
nm=100000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
nm=100
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
nm=10000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
nm=100000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
plot(mix$U$`u:M`$y)
install.packages("~/Desktop/sommer_4.1.4.tar.gz", repos = NULL, type = "source")
nm=10000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
plot(mix$U$`u:M`$y)
data(DT_example)
DT <- DT_example
A <- A_example
head(DT)
## Compound simmetry (CS) model
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units, #return.param = T,
data=DT)
summary(ans1)
install.packages("~/Desktop/sommer_4.1.4.tar.gz", repos = NULL, type = "source")
library(sommer)
data(DT_example)
DT <- DT_example
A <- A_example
head(DT)
## Compound simmetry (CS) model
ans1 <- mmer(Yield~Env,
random= ~ Name + Env:Name,
rcov= ~ units, #return.param = T,
data=DT)
summary(ans1)
nm=10000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = FALSE, data=df)#, reshape.output = F)
summary(mix)$varcomp
mix2 <- mixed.solve(y, Z=M)
library(rrBLUP)
mix2 <- mixed.solve(y, Z=M)
mix2$Vu
summary(mix)$varcomp
mix2$Ve
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = T, data=df)#, reshape.output = F)
plot(mix$U$`u:M`$y,mix2$u)
nm=100000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
g <- as.vector(crossprod(t(M),u))
h2 <- 0.5  #heritability
y <- g + rnorm(200,mean=0,sd=sqrt((1-h2)/h2*var(g)))
df <- data.frame(y=y, id=as.factor(1:200))
library(sommer)
mix <- mmer(y~1, random=~vs(M, buildGu = FALSE), getPEV = F, data=df)#, reshape.output = F)
summary(mix)$varcomp
library(rrBLUP)
mix2 <- mixed.solve(y, Z=M)
mix2$Vu
mix2$Ve
plot(mix$U$`u:M`$y,mix2$u)
mix2 <- mixed.solve(y, Z=M)
mix2$Vu
mix2$Ve
nm=300000
M <- matrix(rep(0,200*nm),200,nm)
for (i in 1:200) {
M[i,] <- ifelse(runif(nm)<0.5,-1,1)
}
#random phenotypes
u <- rnorm(nm)
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("v1.sommer.quick.start.Rmd", pdf_document())
data(DT_cpdata)
DT <- DT_cpdata
GT <- GT_cpdata
MP <- MP_cpdata
#### create the variance-covariance matrix
A <- A.mat(GT) # additive relationship matrix
#### look at the data and fit the model
head(DT,3)
head(MP,3)
GT[1:3,1:4]
mix1 <- GWAS(color~1,
random=~vs(id,Gu=A)
+ Rowf + Colf,
rcov=~units,
data=DT,
M=GT, gTerm = "u:id",
verbose = FALSE)
?GWAS
# setwd("~/Desktop/sommer/vignettes")
setwd("~/Desktop/sommer/vignettes")
library(rmarkdown)
library(sommer)
# Sys.which("pdflatex")
# Sys.getenv("PATH")
# Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
render("v1.sommer.quick.start.Rmd", pdf_document())
render("v2.sommer.changes.and.faqs.Rmd", pdf_document())
render("v3.sommer.qg.Rmd", pdf_document())
render("v4.sommer.gxe.Rmd", pdf_document())
render("v5.sommer.vs.lme4.Rmd", pdf_document())
?sommer::GWAS
